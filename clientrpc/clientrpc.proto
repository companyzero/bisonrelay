syntax = "proto3";

/******************************************************************************
  *                            Services
  *****************************************************************************/

option go_package = "github.com/companyzero/bisconrelay/clientrpc/types";

/* VersionService is the service information about the version of a running RPC
   server. */
service VersionService {
  /* Version returns version information about the server. */
  rpc Version(VersionRequest) returns (VersionResponse);

  /* KeepaliveStream returns a stream where the server continuously writes
     keepalive events.

     The stream only terminates if the client requests it or the connection to
     the server is closed.
   */
  rpc KeepaliveStream(KeepaliveStreamRequest) returns (stream KeepaliveEvent);
}

/* ChatService is the service for interacting with a BR client chat messages. */
service ChatService {
  /* PM sends a private message to a user of the client. */
  rpc PM(PMRequest) returns (PMResponse);

  /* PMStream returns a stream that gets PMs received by the client. */
  rpc PMStream(PMStreamRequest) returns (stream ReceivedPM);

  /* AckReceivedPM acks to the server that PMs up to a sequence ID have been
     processed. */
  rpc AckReceivedPM(AckRequest) returns (AckResponse);

  /* GCM sends a message in a GC. */
  rpc GCM(GCMRequest) returns (GCMResponse);

  /* GCMStream returns a stream that gets GC messages received by the client. */
  rpc GCMStream(GCMStreamRequest) returns (stream GCReceivedMsg);

  /* AckReceivedGCM acks to the server that GCMs up to a sequence ID have been
     processed. */
  rpc AckReceivedGCM(AckRequest) returns (AckResponse);
}


/******************************************************************************
  *                           Messages
  *****************************************************************************/

message VersionRequest {
}

/* VersionResponse is the information about the running RPC server. */
message VersionResponse {
  /* app_version is the version of the application. */
  string app_version = 1;

  /* go_runtime is the Go version the server was compiled with. */
  string go_runtime = 2;

  /* app_name is the name of the underlying app running the server. */
  string app_name = 3;
}

/* KeepaliveStreamRequest is the request for a new keepalive stream. */
message KeepaliveStreamRequest{
  /* interval is how often to send the keepalive (in milliseconds).

     A minimum of 1 second is imposed, regardless of the value passed as
     interval. */
  int64 interval = 1;
}

/* KeepaliveEvent is a single keepalive event. */
message KeepaliveEvent{
  /* timestamp is the unix timestamp on the server, with second precision. */
  int64 timestamp = 1;
}

/* AckRequest is a request to ack that a type of message up to a sequence ID has
   been processed. */
message AckRequest {
  /* sequence_id is the ID up to which messages have been processed. */
  uint64 sequence_id = 1;
}

/* AckResponse is the response to an ack request. */
message AckResponse {}


/* PMRequest is a request to send a new private message. */
message PMRequest {
  /* user is either the nick, alias or an hex-encoded user ID of the destination. */
  string user = 1;

  /* msg is the message to be sent. */
  RMPrivateMessage msg = 2;
}

/* PMResponse is the response of the client for a new message. */
message PMResponse {}

/* PMStreamRequest is the request for a new private message reception stream.*/
message PMStreamRequest {
  /* unacked_from specifies to the server the sequence_id of the last processed
     PM. PMs received by the server that have a higher sequence_id will be
     streamed back to the client. */
  uint64 unacked_from = 1;
}

/* ReceivedPM is a private message received by the client. */
message ReceivedPM {
  /* uid is the source user ID in raw format. */
  bytes uid = 1;

  /* nick is the source's nick or alias. */
  string nick = 2;

  /* msg is the received message payload. */
  RMPrivateMessage msg = 3;

  /* timestamp_ms is the timestamp from unix epoch with millisecond precision. */
  int64 timestamp_ms = 4;

  /* sequence_id is an opaque sequential ID. */
  uint64 sequence_id = 5;
}

/* GCMRequest is a request to send a GC message. */
message GCMRequest {
  /* gc is either an hex-encoded GCID or a GC alias. */
  string gc = 1;

  /* msg is the text payload of the message. */
  string msg = 2;
}

/* GCMResponse is the response to sending a GC message. */
message GCMResponse {}

/* GCMStreamRequest is a request to a stream of received GC messages. */
message GCMStreamRequest {
  /* unacked_from specifies to the server the sequence_id of the last processed
     GCM. GCMs received by the server that have a higher sequence_id will be
     streamed back to the client. */
  uint64 unacked_from = 1;
}

/* GCReceivedMsg is a GC message received from a remote user. */
message GCReceivedMsg {
  /* uid is the source user ID. */
  bytes uid = 1;
  /* nick is the source user nick/alias. */
  string nick = 2;
  /* gc_alias is the local alias of the GC where the message was sent. */
  string gc_alias = 3;
  /* msg is the received message. */
  RMGroupMessage msg = 4;
  /* timestamp_ms is the server timestamp of the message with millisecond precision. */
  int64 timestamp_ms = 5;
  /* sequence_id is an opaque sequential ID. */
  uint64 sequence_id = 6;
}


/******************************************************************************
  *                          Routed RPC Compat
  *****************************************************************************/

/* The message definitions below this point should all be compatible to their
   corresponding definitions in the /rpc package. The intention is to eventually
   replace the definitions there for this ones. In particular, the json_name
   defined for each field MUST be the same as the existing one for the type. */

enum MessageMode {
  /* MESSAGE_MODE_NORMAL is the standard mode for messages. */
  MESSAGE_MODE_NORMAL = 0;
  /* MESSAGE_MODE_ME are messages sent in the passive voice (i.e. with /me). */
  MESSAGE_MODE_ME = 1;
}

/* RMPrivateMessage is the network-level routed private message.*/
message RMPrivateMessage {
  /* message is the private message payload. */
  string message = 1;
  /* mode is the message mode. */
  MessageMode mode = 2;
}


/* RMGroupMessage is the network-level routed group message. */
message RMGroupMessage {
  /* id is the group chat id where the message was sent. */
  bytes id = 1;
  /* generation is the internal generation of the group chat metadata when the
     sender sent this message. */
  uint64 generation = 2;
  /* message is the textual content. */
  string message = 3;
  /* mode is the mode of the message. */
  MessageMode mode = 4;
}
