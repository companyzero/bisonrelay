// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: clientrpc.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageMode int32

const (
	// MESSAGE_MODE_NORMAL is the standard mode for messages.
	MessageMode_MESSAGE_MODE_NORMAL MessageMode = 0
	// MESSAGE_MODE_ME are messages sent in the passive voice (i.e. with /me).
	MessageMode_MESSAGE_MODE_ME MessageMode = 1
)

// Enum value maps for MessageMode.
var (
	MessageMode_name = map[int32]string{
		0: "MESSAGE_MODE_NORMAL",
		1: "MESSAGE_MODE_ME",
	}
	MessageMode_value = map[string]int32{
		"MESSAGE_MODE_NORMAL": 0,
		"MESSAGE_MODE_ME":     1,
	}
)

func (x MessageMode) Enum() *MessageMode {
	p := new(MessageMode)
	*p = x
	return p
}

func (x MessageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_clientrpc_proto_enumTypes[0].Descriptor()
}

func (MessageMode) Type() protoreflect.EnumType {
	return &file_clientrpc_proto_enumTypes[0]
}

func (x MessageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageMode.Descriptor instead.
func (MessageMode) EnumDescriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{0}
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{0}
}

// VersionResponse is the information about the running RPC server.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_version is the version of the application.
	AppVersion string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// go_runtime is the Go version the server was compiled with.
	GoRuntime string `protobuf:"bytes,2,opt,name=go_runtime,json=goRuntime,proto3" json:"go_runtime,omitempty"`
	// app_name is the name of the underlying app running the server.
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *VersionResponse) GetGoRuntime() string {
	if x != nil {
		return x.GoRuntime
	}
	return ""
}

func (x *VersionResponse) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// KeepaliveStreamRequest is the request for a new keepalive stream.
type KeepaliveStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interval is how often to send the keepalive (in milliseconds).
	//
	// A minimum of 1 second is imposed, regardless of the value passed as
	// interval.
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *KeepaliveStreamRequest) Reset() {
	*x = KeepaliveStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepaliveStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveStreamRequest) ProtoMessage() {}

func (x *KeepaliveStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveStreamRequest.ProtoReflect.Descriptor instead.
func (*KeepaliveStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{2}
}

func (x *KeepaliveStreamRequest) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// KeepaliveEvent is a single keepalive event.
type KeepaliveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp is the unix timestamp on the server, with second precision.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *KeepaliveEvent) Reset() {
	*x = KeepaliveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepaliveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveEvent) ProtoMessage() {}

func (x *KeepaliveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveEvent.ProtoReflect.Descriptor instead.
func (*KeepaliveEvent) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{3}
}

func (x *KeepaliveEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// AckRequest is a request to ack that a type of message up to a sequence ID has
// been processed.
type AckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is the ID up to which messages have been processed.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{4}
}

func (x *AckRequest) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// AckResponse is the response to an ack request.
type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{5}
}

// PMRequest is a request to send a new private message.
type PMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is either the nick, alias or an hex-encoded user ID of the destination.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// msg is the message to be sent.
	Msg *RMPrivateMessage `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PMRequest) Reset() {
	*x = PMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMRequest) ProtoMessage() {}

func (x *PMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMRequest.ProtoReflect.Descriptor instead.
func (*PMRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{6}
}

func (x *PMRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PMRequest) GetMsg() *RMPrivateMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

// PMResponse is the response of the client for a new message.
type PMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PMResponse) Reset() {
	*x = PMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMResponse) ProtoMessage() {}

func (x *PMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMResponse.ProtoReflect.Descriptor instead.
func (*PMResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{7}
}

// PMStreamRequest is the request for a new private message reception stream.
type PMStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// PM. PMs received by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *PMStreamRequest) Reset() {
	*x = PMStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMStreamRequest) ProtoMessage() {}

func (x *PMStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMStreamRequest.ProtoReflect.Descriptor instead.
func (*PMStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{8}
}

func (x *PMStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedPM is a private message received by the client.
type ReceivedPM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the source user ID in raw format.
	Uid []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the source's nick or alias.
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	// msg is the received message payload.
	Msg *RMPrivateMessage `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// timestamp_ms is the timestamp from unix epoch with millisecond precision.
	TimestampMs int64 `protobuf:"varint,4,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,5,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *ReceivedPM) Reset() {
	*x = ReceivedPM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPM) ProtoMessage() {}

func (x *ReceivedPM) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPM.ProtoReflect.Descriptor instead.
func (*ReceivedPM) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{9}
}

func (x *ReceivedPM) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ReceivedPM) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *ReceivedPM) GetMsg() *RMPrivateMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReceivedPM) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *ReceivedPM) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// GCMRequest is a request to send a GC message.
type GCMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is either an hex-encoded GCID or a GC alias.
	Gc string `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
	// msg is the text payload of the message.
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *GCMRequest) Reset() {
	*x = GCMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMRequest) ProtoMessage() {}

func (x *GCMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMRequest.ProtoReflect.Descriptor instead.
func (*GCMRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GCMRequest) GetGc() string {
	if x != nil {
		return x.Gc
	}
	return ""
}

func (x *GCMRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// GCMResponse is the response to sending a GC message.
type GCMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCMResponse) Reset() {
	*x = GCMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMResponse) ProtoMessage() {}

func (x *GCMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMResponse.ProtoReflect.Descriptor instead.
func (*GCMResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{11}
}

// GCMStreamRequest is a request to a stream of received GC messages.
type GCMStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// GCM. GCMs received by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *GCMStreamRequest) Reset() {
	*x = GCMStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMStreamRequest) ProtoMessage() {}

func (x *GCMStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMStreamRequest.ProtoReflect.Descriptor instead.
func (*GCMStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{12}
}

func (x *GCMStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// GCReceivedMsg is a GC message received from a remote user.
type GCReceivedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the source user ID.
	Uid []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the source user nick/alias.
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	// gc_alias is the local alias of the GC where the message was sent.
	GcAlias string `protobuf:"bytes,3,opt,name=gc_alias,json=gcAlias,proto3" json:"gc_alias,omitempty"`
	// msg is the received message.
	Msg *RMGroupMessage `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	// timestamp_ms is the server timestamp of the message with millisecond precision.
	TimestampMs int64 `protobuf:"varint,5,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,6,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *GCReceivedMsg) Reset() {
	*x = GCReceivedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCReceivedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCReceivedMsg) ProtoMessage() {}

func (x *GCReceivedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCReceivedMsg.ProtoReflect.Descriptor instead.
func (*GCReceivedMsg) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{13}
}

func (x *GCReceivedMsg) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *GCReceivedMsg) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GCReceivedMsg) GetGcAlias() string {
	if x != nil {
		return x.GcAlias
	}
	return ""
}

func (x *GCReceivedMsg) GetMsg() *RMGroupMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *GCReceivedMsg) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *GCReceivedMsg) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// SubscribeToPostsRequest is a request to subscribe to a remote user's posts.
type SubscribeToPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the nick or hex-encoded ID of the user to subscribe to.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SubscribeToPostsRequest) Reset() {
	*x = SubscribeToPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToPostsRequest) ProtoMessage() {}

func (x *SubscribeToPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToPostsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToPostsRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{14}
}

func (x *SubscribeToPostsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// SubscribeToPostsResponse is the response to subscribing to a remote user's posts.
type SubscribeToPostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeToPostsResponse) Reset() {
	*x = SubscribeToPostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToPostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToPostsResponse) ProtoMessage() {}

func (x *SubscribeToPostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToPostsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToPostsResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{15}
}

// UnsubscribeToPostsRequest is a request to unsubscribe from a remote user's posts.
type UnsubscribeToPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the nick or hex-encoded ID of the user to unsubscribe from.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UnsubscribeToPostsRequest) Reset() {
	*x = UnsubscribeToPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeToPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeToPostsRequest) ProtoMessage() {}

func (x *UnsubscribeToPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeToPostsRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeToPostsRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{16}
}

func (x *UnsubscribeToPostsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// UnsubscribeToPostsResponse is the response to an unsubscribe request.
type UnsubscribeToPostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsubscribeToPostsResponse) Reset() {
	*x = UnsubscribeToPostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeToPostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeToPostsResponse) ProtoMessage() {}

func (x *UnsubscribeToPostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeToPostsResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeToPostsResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{17}
}

// PostSummary is the summary information about a post.
type PostSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the post ID (hash of the post metadata).
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the id of the relayer of the post (who the local client received
	// the post from).
	From []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// author_id is the id of the author of the post.
	AuthorId []byte `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// author_nick is the reported nick of the author of the post.
	AuthorNick string `protobuf:"bytes,4,opt,name=author_nick,json=authorNick,proto3" json:"author_nick,omitempty"`
	// date is the unix timestamp of the post.
	Date int64 `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	// last_status_ts is the timestamp of the last recorded status update of the
	// post.
	LastStatusTs int64 `protobuf:"varint,6,opt,name=last_status_ts,json=lastStatusTs,proto3" json:"last_status_ts,omitempty"`
	// title is either the included or suggested title of the post.
	Title string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *PostSummary) Reset() {
	*x = PostSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSummary) ProtoMessage() {}

func (x *PostSummary) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSummary.ProtoReflect.Descriptor instead.
func (*PostSummary) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{18}
}

func (x *PostSummary) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PostSummary) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PostSummary) GetAuthorId() []byte {
	if x != nil {
		return x.AuthorId
	}
	return nil
}

func (x *PostSummary) GetAuthorNick() string {
	if x != nil {
		return x.AuthorNick
	}
	return ""
}

func (x *PostSummary) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *PostSummary) GetLastStatusTs() int64 {
	if x != nil {
		return x.LastStatusTs
	}
	return 0
}

func (x *PostSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// PostsStreamRequest is the request to establish a stream of received post events.
type PostsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// post. Posts received by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *PostsStreamRequest) Reset() {
	*x = PostsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostsStreamRequest) ProtoMessage() {}

func (x *PostsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostsStreamRequest.ProtoReflect.Descriptor instead.
func (*PostsStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{19}
}

func (x *PostsStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedPost is a post received by the local client.
type ReceivedPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// relayer_id is the id of the user we received the post from (may not be the
	// same as the author).
	RelayerId []byte `protobuf:"bytes,2,opt,name=relayer_id,json=relayerId,proto3" json:"relayer_id,omitempty"`
	// summary is the summary information about the post.
	Summary *PostSummary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// post is the full post data.
	Post *PostMetadata `protobuf:"bytes,4,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *ReceivedPost) Reset() {
	*x = ReceivedPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPost) ProtoMessage() {}

func (x *ReceivedPost) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPost.ProtoReflect.Descriptor instead.
func (*ReceivedPost) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{20}
}

func (x *ReceivedPost) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ReceivedPost) GetRelayerId() []byte {
	if x != nil {
		return x.RelayerId
	}
	return nil
}

func (x *ReceivedPost) GetSummary() *PostSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ReceivedPost) GetPost() *PostMetadata {
	if x != nil {
		return x.Post
	}
	return nil
}

// PostsStatusStreamRequest is a request to establish a stream that receives
// post status updates received by the local client.
type PostsStatusStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// Post Status. Post Status received by the server that have a higher
	// sequence_id will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *PostsStatusStreamRequest) Reset() {
	*x = PostsStatusStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostsStatusStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostsStatusStreamRequest) ProtoMessage() {}

func (x *PostsStatusStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostsStatusStreamRequest.ProtoReflect.Descriptor instead.
func (*PostsStatusStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{21}
}

func (x *PostsStatusStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedPostStatus is a post status update received by the local client.
type ReceivedPostStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// relayer_id is the id of the sender of the client that sent the update.
	RelayerId []byte `protobuf:"bytes,2,opt,name=relayer_id,json=relayerId,proto3" json:"relayer_id,omitempty"`
	// post_id is the id of the corresponding post.
	PostId []byte `protobuf:"bytes,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	// status_from is the original author of the status.
	StatusFrom []byte `protobuf:"bytes,4,opt,name=status_from,json=statusFrom,proto3" json:"status_from,omitempty"`
	// status is the full status data.
	Status *PostMetadataStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// status_from_nick is the nick of the original author of the status.
	StatusFromNick string `protobuf:"bytes,6,opt,name=status_from_nick,json=statusFromNick,proto3" json:"status_from_nick,omitempty"`
}

func (x *ReceivedPostStatus) Reset() {
	*x = ReceivedPostStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPostStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPostStatus) ProtoMessage() {}

func (x *ReceivedPostStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPostStatus.ProtoReflect.Descriptor instead.
func (*ReceivedPostStatus) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{22}
}

func (x *ReceivedPostStatus) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ReceivedPostStatus) GetRelayerId() []byte {
	if x != nil {
		return x.RelayerId
	}
	return nil
}

func (x *ReceivedPostStatus) GetPostId() []byte {
	if x != nil {
		return x.PostId
	}
	return nil
}

func (x *ReceivedPostStatus) GetStatusFrom() []byte {
	if x != nil {
		return x.StatusFrom
	}
	return nil
}

func (x *ReceivedPostStatus) GetStatus() *PostMetadataStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReceivedPostStatus) GetStatusFromNick() string {
	if x != nil {
		return x.StatusFromNick
	}
	return ""
}

// TipUserRequest is a request to tip a remote user.
type TipUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the remote user nick or hex-encoded ID.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// dcr_amount is the DCR amount to send as tip.
	DcrAmount float64 `protobuf:"fixed64,2,opt,name=dcr_amount,json=dcrAmount,proto3" json:"dcr_amount,omitempty"`
}

func (x *TipUserRequest) Reset() {
	*x = TipUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipUserRequest) ProtoMessage() {}

func (x *TipUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipUserRequest.ProtoReflect.Descriptor instead.
func (*TipUserRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{23}
}

func (x *TipUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TipUserRequest) GetDcrAmount() float64 {
	if x != nil {
		return x.DcrAmount
	}
	return 0
}

// TipUserResponse is the response to a tip user request.
type TipUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TipUserResponse) Reset() {
	*x = TipUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipUserResponse) ProtoMessage() {}

func (x *TipUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipUserResponse.ProtoReflect.Descriptor instead.
func (*TipUserResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{24}
}

// MediateKXRequest is the request to perform a transitive KX with a given
// user.
type MediateKXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mediator is the nick or hex ID of the mediator user (which must already be
	// KX'd with).
	Mediator string `protobuf:"bytes,1,opt,name=mediator,proto3" json:"mediator,omitempty"`
	// target is the hex ID of the target user to KX with.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *MediateKXRequest) Reset() {
	*x = MediateKXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediateKXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediateKXRequest) ProtoMessage() {}

func (x *MediateKXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediateKXRequest.ProtoReflect.Descriptor instead.
func (*MediateKXRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{25}
}

func (x *MediateKXRequest) GetMediator() string {
	if x != nil {
		return x.Mediator
	}
	return ""
}

func (x *MediateKXRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// MediateKXResponse is the response to a mediate KX request.
type MediateKXResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediateKXResponse) Reset() {
	*x = MediateKXResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediateKXResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediateKXResponse) ProtoMessage() {}

func (x *MediateKXResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediateKXResponse.ProtoReflect.Descriptor instead.
func (*MediateKXResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{26}
}

// KXStreamRequest is the request sent when obtaining a stream of KX notifications.
type KXStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last completed
	// KX. KXs completed by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *KXStreamRequest) Reset() {
	*x = KXStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KXStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KXStreamRequest) ProtoMessage() {}

func (x *KXStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KXStreamRequest.ProtoReflect.Descriptor instead.
func (*KXStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{27}
}

func (x *KXStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// KXCompleted is the information about a completed KX event.
type KXCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// uid is the raw ID of the KX'd user.
	Uid []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the nick of the KX'd user.
	Nick string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
}

func (x *KXCompleted) Reset() {
	*x = KXCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KXCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KXCompleted) ProtoMessage() {}

func (x *KXCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KXCompleted.ProtoReflect.Descriptor instead.
func (*KXCompleted) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{28}
}

func (x *KXCompleted) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *KXCompleted) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *KXCompleted) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

// RMPrivateMessage is the network-level routed private message.
type RMPrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message is the private message payload.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// mode is the message mode.
	Mode MessageMode `protobuf:"varint,2,opt,name=mode,proto3,enum=MessageMode" json:"mode,omitempty"`
}

func (x *RMPrivateMessage) Reset() {
	*x = RMPrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMPrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMPrivateMessage) ProtoMessage() {}

func (x *RMPrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMPrivateMessage.ProtoReflect.Descriptor instead.
func (*RMPrivateMessage) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{29}
}

func (x *RMPrivateMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RMPrivateMessage) GetMode() MessageMode {
	if x != nil {
		return x.Mode
	}
	return MessageMode_MESSAGE_MODE_NORMAL
}

// RMGroupMessage is the network-level routed group message.
type RMGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the group chat id where the message was sent.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// generation is the internal generation of the group chat metadata when the
	// sender sent this message.
	Generation uint64 `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	// message is the textual content.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// mode is the mode of the message.
	Mode MessageMode `protobuf:"varint,4,opt,name=mode,proto3,enum=MessageMode" json:"mode,omitempty"`
}

func (x *RMGroupMessage) Reset() {
	*x = RMGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMGroupMessage) ProtoMessage() {}

func (x *RMGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMGroupMessage.ProtoReflect.Descriptor instead.
func (*RMGroupMessage) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{30}
}

func (x *RMGroupMessage) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RMGroupMessage) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *RMGroupMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RMGroupMessage) GetMode() MessageMode {
	if x != nil {
		return x.Mode
	}
	return MessageMode_MESSAGE_MODE_NORMAL
}

// PostMetadata is the network-level post data.
type PostMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version defines the available fields within attributes.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// attributes defines the available post attributes.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostMetadata) Reset() {
	*x = PostMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMetadata) ProtoMessage() {}

func (x *PostMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMetadata.ProtoReflect.Descriptor instead.
func (*PostMetadata) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{31}
}

func (x *PostMetadata) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PostMetadata) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// PostMetadataStatus is the network-level post status update data.
type PostMetadataStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version defines the available fields within attributes.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// from is the UID of the original status creator.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// link is the ID of the post.
	Link string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// attributes is the list of post update attributes.
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostMetadataStatus) Reset() {
	*x = PostMetadataStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMetadataStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMetadataStatus) ProtoMessage() {}

func (x *PostMetadataStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMetadataStatus.ProtoReflect.Descriptor instead.
func (*PostMetadataStatus) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{32}
}

func (x *PostMetadataStatus) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PostMetadataStatus) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PostMetadataStatus) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PostMetadataStatus) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_clientrpc_proto protoreflect.FileDescriptor

var file_clientrpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x34, 0x0a, 0x16, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x0e, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2d, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x4d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x0c, 0x0a, 0x0a, 0x50,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x50, 0x4d, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22,
	0x9b, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x4d, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x52, 0x4d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x0a, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x0d, 0x0a,
	0x0b, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x10,
	0x47, 0x43, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x47, 0x43, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x63, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x63, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x50, 0x6f, 0x73,
	0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x70,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xe5, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x22, 0x43, 0x0a, 0x0e, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x63, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x64, 0x63, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x69,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a,
	0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x4b, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x4b, 0x58,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x22, 0x54, 0x0a, 0x0b, 0x4b, 0x58, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x22, 0x4e, 0x0a, 0x10, 0x52, 0x4d, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01,
	0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3b, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x45, 0x10, 0x01, 0x32, 0x7d, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x32, 0x95, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x50, 0x4d, 0x12, 0x0a, 0x2e, 0x50,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x50, 0x4d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x50, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x10, 0x2e, 0x50, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x4d,
	0x30, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x4d, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x03, 0x47, 0x43, 0x4d, 0x12, 0x0b, 0x2e, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x47, 0x43, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e,
	0x47, 0x43, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x47, 0x43, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x73, 0x67,
	0x30, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x47, 0x43, 0x4d, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x12, 0x11, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x4b, 0x58, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x10, 0x2e, 0x4b, 0x58, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x4b, 0x58, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x30,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x41, 0x63, 0x6b, 0x4b, 0x58, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x84,
	0x03, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x19, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30,
	0x01, 0x12, 0x32, 0x0a, 0x15, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x3f, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x7a, 0x65, 0x72, 0x6f,
	0x2f, 0x62, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientrpc_proto_rawDescOnce sync.Once
	file_clientrpc_proto_rawDescData = file_clientrpc_proto_rawDesc
)

func file_clientrpc_proto_rawDescGZIP() []byte {
	file_clientrpc_proto_rawDescOnce.Do(func() {
		file_clientrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientrpc_proto_rawDescData)
	})
	return file_clientrpc_proto_rawDescData
}

var file_clientrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_clientrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_clientrpc_proto_goTypes = []interface{}{
	(MessageMode)(0),                   // 0: MessageMode
	(*VersionRequest)(nil),             // 1: VersionRequest
	(*VersionResponse)(nil),            // 2: VersionResponse
	(*KeepaliveStreamRequest)(nil),     // 3: KeepaliveStreamRequest
	(*KeepaliveEvent)(nil),             // 4: KeepaliveEvent
	(*AckRequest)(nil),                 // 5: AckRequest
	(*AckResponse)(nil),                // 6: AckResponse
	(*PMRequest)(nil),                  // 7: PMRequest
	(*PMResponse)(nil),                 // 8: PMResponse
	(*PMStreamRequest)(nil),            // 9: PMStreamRequest
	(*ReceivedPM)(nil),                 // 10: ReceivedPM
	(*GCMRequest)(nil),                 // 11: GCMRequest
	(*GCMResponse)(nil),                // 12: GCMResponse
	(*GCMStreamRequest)(nil),           // 13: GCMStreamRequest
	(*GCReceivedMsg)(nil),              // 14: GCReceivedMsg
	(*SubscribeToPostsRequest)(nil),    // 15: SubscribeToPostsRequest
	(*SubscribeToPostsResponse)(nil),   // 16: SubscribeToPostsResponse
	(*UnsubscribeToPostsRequest)(nil),  // 17: UnsubscribeToPostsRequest
	(*UnsubscribeToPostsResponse)(nil), // 18: UnsubscribeToPostsResponse
	(*PostSummary)(nil),                // 19: PostSummary
	(*PostsStreamRequest)(nil),         // 20: PostsStreamRequest
	(*ReceivedPost)(nil),               // 21: ReceivedPost
	(*PostsStatusStreamRequest)(nil),   // 22: PostsStatusStreamRequest
	(*ReceivedPostStatus)(nil),         // 23: ReceivedPostStatus
	(*TipUserRequest)(nil),             // 24: TipUserRequest
	(*TipUserResponse)(nil),            // 25: TipUserResponse
	(*MediateKXRequest)(nil),           // 26: MediateKXRequest
	(*MediateKXResponse)(nil),          // 27: MediateKXResponse
	(*KXStreamRequest)(nil),            // 28: KXStreamRequest
	(*KXCompleted)(nil),                // 29: KXCompleted
	(*RMPrivateMessage)(nil),           // 30: RMPrivateMessage
	(*RMGroupMessage)(nil),             // 31: RMGroupMessage
	(*PostMetadata)(nil),               // 32: PostMetadata
	(*PostMetadataStatus)(nil),         // 33: PostMetadataStatus
	nil,                                // 34: PostMetadata.AttributesEntry
	nil,                                // 35: PostMetadataStatus.AttributesEntry
}
var file_clientrpc_proto_depIdxs = []int32{
	30, // 0: PMRequest.msg:type_name -> RMPrivateMessage
	30, // 1: ReceivedPM.msg:type_name -> RMPrivateMessage
	31, // 2: GCReceivedMsg.msg:type_name -> RMGroupMessage
	19, // 3: ReceivedPost.summary:type_name -> PostSummary
	32, // 4: ReceivedPost.post:type_name -> PostMetadata
	33, // 5: ReceivedPostStatus.status:type_name -> PostMetadataStatus
	0,  // 6: RMPrivateMessage.mode:type_name -> MessageMode
	0,  // 7: RMGroupMessage.mode:type_name -> MessageMode
	34, // 8: PostMetadata.attributes:type_name -> PostMetadata.AttributesEntry
	35, // 9: PostMetadataStatus.attributes:type_name -> PostMetadataStatus.AttributesEntry
	1,  // 10: VersionService.Version:input_type -> VersionRequest
	3,  // 11: VersionService.KeepaliveStream:input_type -> KeepaliveStreamRequest
	7,  // 12: ChatService.PM:input_type -> PMRequest
	9,  // 13: ChatService.PMStream:input_type -> PMStreamRequest
	5,  // 14: ChatService.AckReceivedPM:input_type -> AckRequest
	11, // 15: ChatService.GCM:input_type -> GCMRequest
	13, // 16: ChatService.GCMStream:input_type -> GCMStreamRequest
	5,  // 17: ChatService.AckReceivedGCM:input_type -> AckRequest
	26, // 18: ChatService.MediateKX:input_type -> MediateKXRequest
	28, // 19: ChatService.KXStream:input_type -> KXStreamRequest
	5,  // 20: ChatService.AckKXCompleted:input_type -> AckRequest
	15, // 21: PostsService.SubscribeToPosts:input_type -> SubscribeToPostsRequest
	17, // 22: PostsService.UnsubscribeToPosts:input_type -> UnsubscribeToPostsRequest
	20, // 23: PostsService.PostsStream:input_type -> PostsStreamRequest
	5,  // 24: PostsService.AckReceivedPost:input_type -> AckRequest
	22, // 25: PostsService.PostsStatusStream:input_type -> PostsStatusStreamRequest
	5,  // 26: PostsService.AckReceivedPostStatus:input_type -> AckRequest
	24, // 27: PaymentsService.TipUser:input_type -> TipUserRequest
	2,  // 28: VersionService.Version:output_type -> VersionResponse
	4,  // 29: VersionService.KeepaliveStream:output_type -> KeepaliveEvent
	8,  // 30: ChatService.PM:output_type -> PMResponse
	10, // 31: ChatService.PMStream:output_type -> ReceivedPM
	6,  // 32: ChatService.AckReceivedPM:output_type -> AckResponse
	12, // 33: ChatService.GCM:output_type -> GCMResponse
	14, // 34: ChatService.GCMStream:output_type -> GCReceivedMsg
	6,  // 35: ChatService.AckReceivedGCM:output_type -> AckResponse
	27, // 36: ChatService.MediateKX:output_type -> MediateKXResponse
	29, // 37: ChatService.KXStream:output_type -> KXCompleted
	6,  // 38: ChatService.AckKXCompleted:output_type -> AckResponse
	16, // 39: PostsService.SubscribeToPosts:output_type -> SubscribeToPostsResponse
	18, // 40: PostsService.UnsubscribeToPosts:output_type -> UnsubscribeToPostsResponse
	21, // 41: PostsService.PostsStream:output_type -> ReceivedPost
	6,  // 42: PostsService.AckReceivedPost:output_type -> AckResponse
	23, // 43: PostsService.PostsStatusStream:output_type -> ReceivedPostStatus
	6,  // 44: PostsService.AckReceivedPostStatus:output_type -> AckResponse
	25, // 45: PaymentsService.TipUser:output_type -> TipUserResponse
	28, // [28:46] is the sub-list for method output_type
	10, // [10:28] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_clientrpc_proto_init() }
func file_clientrpc_proto_init() {
	if File_clientrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepaliveStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepaliveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCReceivedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToPostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeToPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeToPostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostsStatusStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPostStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediateKXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediateKXResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KXStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KXCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMPrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMetadataStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientrpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_clientrpc_proto_goTypes,
		DependencyIndexes: file_clientrpc_proto_depIdxs,
		EnumInfos:         file_clientrpc_proto_enumTypes,
		MessageInfos:      file_clientrpc_proto_msgTypes,
	}.Build()
	File_clientrpc_proto = out.File
	file_clientrpc_proto_rawDesc = nil
	file_clientrpc_proto_goTypes = nil
	file_clientrpc_proto_depIdxs = nil
}
