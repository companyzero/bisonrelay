// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: clientrpc.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageMode int32

const (
	// MESSAGE_MODE_NORMAL is the standard mode for messages.
	MessageMode_MESSAGE_MODE_NORMAL MessageMode = 0
	// MESSAGE_MODE_ME are messages sent in the passive voice (i.e. with /me).
	MessageMode_MESSAGE_MODE_ME MessageMode = 1
)

// Enum value maps for MessageMode.
var (
	MessageMode_name = map[int32]string{
		0: "MESSAGE_MODE_NORMAL",
		1: "MESSAGE_MODE_ME",
	}
	MessageMode_value = map[string]int32{
		"MESSAGE_MODE_NORMAL": 0,
		"MESSAGE_MODE_ME":     1,
	}
)

func (x MessageMode) Enum() *MessageMode {
	p := new(MessageMode)
	*p = x
	return p
}

func (x MessageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_clientrpc_proto_enumTypes[0].Descriptor()
}

func (MessageMode) Type() protoreflect.EnumType {
	return &file_clientrpc_proto_enumTypes[0]
}

func (x MessageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageMode.Descriptor instead.
func (MessageMode) EnumDescriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{0}
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{0}
}

// VersionResponse is the information about the running RPC server.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_version is the version of the application.
	AppVersion string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// go_runtime is the Go version the server was compiled with.
	GoRuntime string `protobuf:"bytes,2,opt,name=go_runtime,json=goRuntime,proto3" json:"go_runtime,omitempty"`
	// app_name is the name of the underlying app running the server.
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *VersionResponse) GetGoRuntime() string {
	if x != nil {
		return x.GoRuntime
	}
	return ""
}

func (x *VersionResponse) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// KeepaliveStreamRequest is the request for a new keepalive stream.
type KeepaliveStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interval is how often to send the keepalive (in milliseconds).
	//
	// A minimum of 1 second is imposed, regardless of the value passed as
	// interval.
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *KeepaliveStreamRequest) Reset() {
	*x = KeepaliveStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepaliveStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveStreamRequest) ProtoMessage() {}

func (x *KeepaliveStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveStreamRequest.ProtoReflect.Descriptor instead.
func (*KeepaliveStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{2}
}

func (x *KeepaliveStreamRequest) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

// KeepaliveEvent is a single keepalive event.
type KeepaliveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp is the unix timestamp on the server, with second precision.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *KeepaliveEvent) Reset() {
	*x = KeepaliveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepaliveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveEvent) ProtoMessage() {}

func (x *KeepaliveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveEvent.ProtoReflect.Descriptor instead.
func (*KeepaliveEvent) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{3}
}

func (x *KeepaliveEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// AckRequest is a request to ack that a type of message up to a sequence ID has
// been processed.
type AckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is the ID up to which messages have been processed.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{4}
}

func (x *AckRequest) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// AckResponse is the response to an ack request.
type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{5}
}

// PMRequest is a request to send a new private message.
type PMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is either the nick, alias or an hex-encoded user ID of the destination.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// msg is the message to be sent.
	Msg *RMPrivateMessage `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PMRequest) Reset() {
	*x = PMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMRequest) ProtoMessage() {}

func (x *PMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMRequest.ProtoReflect.Descriptor instead.
func (*PMRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{6}
}

func (x *PMRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PMRequest) GetMsg() *RMPrivateMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

// PMResponse is the response of the client for a new message.
type PMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PMResponse) Reset() {
	*x = PMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMResponse) ProtoMessage() {}

func (x *PMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMResponse.ProtoReflect.Descriptor instead.
func (*PMResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{7}
}

// PMStreamRequest is the request for a new private message reception stream.
type PMStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// PM. PMs received by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *PMStreamRequest) Reset() {
	*x = PMStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMStreamRequest) ProtoMessage() {}

func (x *PMStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMStreamRequest.ProtoReflect.Descriptor instead.
func (*PMStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{8}
}

func (x *PMStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedPM is a private message received by the client.
type ReceivedPM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the source user ID in raw format.
	Uid []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the source's nick or alias.
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	// msg is the received message payload.
	Msg *RMPrivateMessage `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// timestamp_ms is the timestamp from unix epoch with millisecond precision.
	TimestampMs int64 `protobuf:"varint,4,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,5,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *ReceivedPM) Reset() {
	*x = ReceivedPM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPM) ProtoMessage() {}

func (x *ReceivedPM) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPM.ProtoReflect.Descriptor instead.
func (*ReceivedPM) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{9}
}

func (x *ReceivedPM) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ReceivedPM) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *ReceivedPM) GetMsg() *RMPrivateMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ReceivedPM) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *ReceivedPM) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// GCMRequest is a request to send a GC message.
type GCMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is either an hex-encoded GCID or a GC alias.
	Gc string `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
	// msg is the text payload of the message.
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *GCMRequest) Reset() {
	*x = GCMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMRequest) ProtoMessage() {}

func (x *GCMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMRequest.ProtoReflect.Descriptor instead.
func (*GCMRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GCMRequest) GetGc() string {
	if x != nil {
		return x.Gc
	}
	return ""
}

func (x *GCMRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// GCMResponse is the response to sending a GC message.
type GCMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GCMResponse) Reset() {
	*x = GCMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMResponse) ProtoMessage() {}

func (x *GCMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMResponse.ProtoReflect.Descriptor instead.
func (*GCMResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{11}
}

// GCMStreamRequest is a request to a stream of received GC messages.
type GCMStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// GCM. GCMs received by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *GCMStreamRequest) Reset() {
	*x = GCMStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMStreamRequest) ProtoMessage() {}

func (x *GCMStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMStreamRequest.ProtoReflect.Descriptor instead.
func (*GCMStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{12}
}

func (x *GCMStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// GCReceivedMsg is a GC message received from a remote user.
type GCReceivedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the source user ID.
	Uid []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the source user nick/alias.
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	// gc_alias is the local alias of the GC where the message was sent.
	GcAlias string `protobuf:"bytes,3,opt,name=gc_alias,json=gcAlias,proto3" json:"gc_alias,omitempty"`
	// msg is the received message.
	Msg *RMGroupMessage `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	// timestamp_ms is the server timestamp of the message with millisecond precision.
	TimestampMs int64 `protobuf:"varint,5,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,6,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *GCReceivedMsg) Reset() {
	*x = GCReceivedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCReceivedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCReceivedMsg) ProtoMessage() {}

func (x *GCReceivedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCReceivedMsg.ProtoReflect.Descriptor instead.
func (*GCReceivedMsg) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{13}
}

func (x *GCReceivedMsg) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *GCReceivedMsg) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GCReceivedMsg) GetGcAlias() string {
	if x != nil {
		return x.GcAlias
	}
	return ""
}

func (x *GCReceivedMsg) GetMsg() *RMGroupMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *GCReceivedMsg) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *GCReceivedMsg) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

// SubscribeToPostsRequest is a request to subscribe to a remote user's posts.
type SubscribeToPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the nick or hex-encoded ID of the user to subscribe to.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SubscribeToPostsRequest) Reset() {
	*x = SubscribeToPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToPostsRequest) ProtoMessage() {}

func (x *SubscribeToPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToPostsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToPostsRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{14}
}

func (x *SubscribeToPostsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// SubscribeToPostsResponse is the response to subscribing to a remote user's posts.
type SubscribeToPostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeToPostsResponse) Reset() {
	*x = SubscribeToPostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToPostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToPostsResponse) ProtoMessage() {}

func (x *SubscribeToPostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToPostsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToPostsResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{15}
}

// UnsubscribeToPostsRequest is a request to unsubscribe from a remote user's posts.
type UnsubscribeToPostsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the nick or hex-encoded ID of the user to unsubscribe from.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UnsubscribeToPostsRequest) Reset() {
	*x = UnsubscribeToPostsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeToPostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeToPostsRequest) ProtoMessage() {}

func (x *UnsubscribeToPostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeToPostsRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeToPostsRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{16}
}

func (x *UnsubscribeToPostsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// UnsubscribeToPostsResponse is the response to an unsubscribe request.
type UnsubscribeToPostsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsubscribeToPostsResponse) Reset() {
	*x = UnsubscribeToPostsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeToPostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeToPostsResponse) ProtoMessage() {}

func (x *UnsubscribeToPostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeToPostsResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeToPostsResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{17}
}

// PostSummary is the summary information about a post.
type PostSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the post ID (hash of the post metadata).
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the id of the relayer of the post (who the local client received
	// the post from).
	From []byte `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// author_id is the id of the author of the post.
	AuthorId []byte `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	// author_nick is the reported nick of the author of the post.
	AuthorNick string `protobuf:"bytes,4,opt,name=author_nick,json=authorNick,proto3" json:"author_nick,omitempty"`
	// date is the unix timestamp of the post.
	Date int64 `protobuf:"varint,5,opt,name=date,proto3" json:"date,omitempty"`
	// last_status_ts is the timestamp of the last recorded status update of the
	// post.
	LastStatusTs int64 `protobuf:"varint,6,opt,name=last_status_ts,json=lastStatusTs,proto3" json:"last_status_ts,omitempty"`
	// title is either the included or suggested title of the post.
	Title string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *PostSummary) Reset() {
	*x = PostSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostSummary) ProtoMessage() {}

func (x *PostSummary) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostSummary.ProtoReflect.Descriptor instead.
func (*PostSummary) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{18}
}

func (x *PostSummary) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PostSummary) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PostSummary) GetAuthorId() []byte {
	if x != nil {
		return x.AuthorId
	}
	return nil
}

func (x *PostSummary) GetAuthorNick() string {
	if x != nil {
		return x.AuthorNick
	}
	return ""
}

func (x *PostSummary) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *PostSummary) GetLastStatusTs() int64 {
	if x != nil {
		return x.LastStatusTs
	}
	return 0
}

func (x *PostSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// PostsStreamRequest is the request to establish a stream of received post events.
type PostsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// post. Posts received by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *PostsStreamRequest) Reset() {
	*x = PostsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostsStreamRequest) ProtoMessage() {}

func (x *PostsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostsStreamRequest.ProtoReflect.Descriptor instead.
func (*PostsStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{19}
}

func (x *PostsStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedPost is a post received by the local client.
type ReceivedPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// relayer_id is the id of the user we received the post from (may not be the
	// same as the author).
	RelayerId []byte `protobuf:"bytes,2,opt,name=relayer_id,json=relayerId,proto3" json:"relayer_id,omitempty"`
	// summary is the summary information about the post.
	Summary *PostSummary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// post is the full post data.
	Post *PostMetadata `protobuf:"bytes,4,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *ReceivedPost) Reset() {
	*x = ReceivedPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPost) ProtoMessage() {}

func (x *ReceivedPost) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPost.ProtoReflect.Descriptor instead.
func (*ReceivedPost) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{20}
}

func (x *ReceivedPost) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ReceivedPost) GetRelayerId() []byte {
	if x != nil {
		return x.RelayerId
	}
	return nil
}

func (x *ReceivedPost) GetSummary() *PostSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ReceivedPost) GetPost() *PostMetadata {
	if x != nil {
		return x.Post
	}
	return nil
}

// PostsStatusStreamRequest is a request to establish a stream that receives
// post status updates received by the local client.
type PostsStatusStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last processed
	// Post Status. Post Status received by the server that have a higher
	// sequence_id will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *PostsStatusStreamRequest) Reset() {
	*x = PostsStatusStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostsStatusStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostsStatusStreamRequest) ProtoMessage() {}

func (x *PostsStatusStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostsStatusStreamRequest.ProtoReflect.Descriptor instead.
func (*PostsStatusStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{21}
}

func (x *PostsStatusStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedPostStatus is a post status update received by the local client.
type ReceivedPostStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// relayer_id is the id of the sender of the client that sent the update.
	RelayerId []byte `protobuf:"bytes,2,opt,name=relayer_id,json=relayerId,proto3" json:"relayer_id,omitempty"`
	// post_id is the id of the corresponding post.
	PostId []byte `protobuf:"bytes,3,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	// status_from is the original author of the status.
	StatusFrom []byte `protobuf:"bytes,4,opt,name=status_from,json=statusFrom,proto3" json:"status_from,omitempty"`
	// status is the full status data.
	Status *PostMetadataStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// status_from_nick is the nick of the original author of the status.
	StatusFromNick string `protobuf:"bytes,6,opt,name=status_from_nick,json=statusFromNick,proto3" json:"status_from_nick,omitempty"`
}

func (x *ReceivedPostStatus) Reset() {
	*x = ReceivedPostStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPostStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPostStatus) ProtoMessage() {}

func (x *ReceivedPostStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPostStatus.ProtoReflect.Descriptor instead.
func (*ReceivedPostStatus) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{22}
}

func (x *ReceivedPostStatus) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ReceivedPostStatus) GetRelayerId() []byte {
	if x != nil {
		return x.RelayerId
	}
	return nil
}

func (x *ReceivedPostStatus) GetPostId() []byte {
	if x != nil {
		return x.PostId
	}
	return nil
}

func (x *ReceivedPostStatus) GetStatusFrom() []byte {
	if x != nil {
		return x.StatusFrom
	}
	return nil
}

func (x *ReceivedPostStatus) GetStatus() *PostMetadataStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReceivedPostStatus) GetStatusFromNick() string {
	if x != nil {
		return x.StatusFromNick
	}
	return ""
}

// TipUserRequest is a request to tip a remote user.
type TipUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the remote user nick or hex-encoded ID.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// dcr_amount is the DCR amount to send as tip.
	DcrAmount float64 `protobuf:"fixed64,2,opt,name=dcr_amount,json=dcrAmount,proto3" json:"dcr_amount,omitempty"`
	// max_attempts is the number of max attempts to try to send the tip.
	MaxAttempts int32 `protobuf:"varint,3,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
}

func (x *TipUserRequest) Reset() {
	*x = TipUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipUserRequest) ProtoMessage() {}

func (x *TipUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipUserRequest.ProtoReflect.Descriptor instead.
func (*TipUserRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{23}
}

func (x *TipUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TipUserRequest) GetDcrAmount() float64 {
	if x != nil {
		return x.DcrAmount
	}
	return 0
}

func (x *TipUserRequest) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

// TipUserResponse is the response to a tip user request.
type TipUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TipUserResponse) Reset() {
	*x = TipUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipUserResponse) ProtoMessage() {}

func (x *TipUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipUserResponse.ProtoReflect.Descriptor instead.
func (*TipUserResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{24}
}

// MediateKXRequest is the request to perform a transitive KX with a given
// user.
type MediateKXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mediator is the nick or hex ID of the mediator user (which must already be
	// KX'd with).
	Mediator string `protobuf:"bytes,1,opt,name=mediator,proto3" json:"mediator,omitempty"`
	// target is the hex ID of the target user to KX with.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *MediateKXRequest) Reset() {
	*x = MediateKXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediateKXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediateKXRequest) ProtoMessage() {}

func (x *MediateKXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediateKXRequest.ProtoReflect.Descriptor instead.
func (*MediateKXRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{25}
}

func (x *MediateKXRequest) GetMediator() string {
	if x != nil {
		return x.Mediator
	}
	return ""
}

func (x *MediateKXRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// MediateKXResponse is the response to a mediate KX request.
type MediateKXResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediateKXResponse) Reset() {
	*x = MediateKXResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediateKXResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediateKXResponse) ProtoMessage() {}

func (x *MediateKXResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediateKXResponse.ProtoReflect.Descriptor instead.
func (*MediateKXResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{26}
}

// KXStreamRequest is the request sent when obtaining a stream of KX notifications.
type KXStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last completed
	// KX. KXs completed by the server that have a higher sequence_id will be
	// streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *KXStreamRequest) Reset() {
	*x = KXStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KXStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KXStreamRequest) ProtoMessage() {}

func (x *KXStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KXStreamRequest.ProtoReflect.Descriptor instead.
func (*KXStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{27}
}

func (x *KXStreamRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// KXCompleted is the information about a completed KX event.
type KXCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// uid is the raw ID of the KX'd user.
	Uid []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the nick of the KX'd user.
	Nick string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	// initial_rendezvous is the initial random RV the key exchange happened.
	InitialRendezvous []byte `protobuf:"bytes,4,opt,name=initial_rendezvous,json=initialRendezvous,proto3" json:"initial_rendezvous,omitempty"`
}

func (x *KXCompleted) Reset() {
	*x = KXCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KXCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KXCompleted) ProtoMessage() {}

func (x *KXCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KXCompleted.ProtoReflect.Descriptor instead.
func (*KXCompleted) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{28}
}

func (x *KXCompleted) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *KXCompleted) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *KXCompleted) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *KXCompleted) GetInitialRendezvous() []byte {
	if x != nil {
		return x.InitialRendezvous
	}
	return nil
}

// WriteNewInviteRequest is the request to add a new invite.
type WriteNewInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is the hex-encoded ID or the alias of the GC in the local client.
	Gc string `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
	// fund_amount is how much to send as funds in the invite. If zero, no funds
	// are included. Amount is in atoms.
	FundAmount uint64 `protobuf:"varint,2,opt,name=fund_amount,json=fundAmount,proto3" json:"fund_amount,omitempty"`
}

func (x *WriteNewInviteRequest) Reset() {
	*x = WriteNewInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteNewInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteNewInviteRequest) ProtoMessage() {}

func (x *WriteNewInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteNewInviteRequest.ProtoReflect.Descriptor instead.
func (*WriteNewInviteRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{29}
}

func (x *WriteNewInviteRequest) GetGc() string {
	if x != nil {
		return x.Gc
	}
	return ""
}

func (x *WriteNewInviteRequest) GetFundAmount() uint64 {
	if x != nil {
		return x.FundAmount
	}
	return 0
}

// WriteNewInviteResponse is an invite that can be sent (out-of-band) to an
// user the local client wishes to KX with.
type WriteNewInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// invite_bytes is the raw invite.
	InviteBytes []byte `protobuf:"bytes,1,opt,name=invite_bytes,json=inviteBytes,proto3" json:"invite_bytes,omitempty"`
	// invite is the data contained in the raw invite.
	Invite *OOBPublicIdentityInvite `protobuf:"bytes,2,opt,name=invite,proto3" json:"invite,omitempty"`
	// invite_key is the pre-paid invite key string that can be used to fetch the
	// invite from the server.
	InviteKey string `protobuf:"bytes,3,opt,name=invite_key,json=inviteKey,proto3" json:"invite_key,omitempty"`
}

func (x *WriteNewInviteResponse) Reset() {
	*x = WriteNewInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteNewInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteNewInviteResponse) ProtoMessage() {}

func (x *WriteNewInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteNewInviteResponse.ProtoReflect.Descriptor instead.
func (*WriteNewInviteResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{30}
}

func (x *WriteNewInviteResponse) GetInviteBytes() []byte {
	if x != nil {
		return x.InviteBytes
	}
	return nil
}

func (x *WriteNewInviteResponse) GetInvite() *OOBPublicIdentityInvite {
	if x != nil {
		return x.Invite
	}
	return nil
}

func (x *WriteNewInviteResponse) GetInviteKey() string {
	if x != nil {
		return x.InviteKey
	}
	return ""
}

// AcceptInviteRequest is the request to accept an invite to KX with an user.
type AcceptInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// invite_bytes is the raw invite.
	InviteBytes []byte `protobuf:"bytes,1,opt,name=invite_bytes,json=inviteBytes,proto3" json:"invite_bytes,omitempty"`
}

func (x *AcceptInviteRequest) Reset() {
	*x = AcceptInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteRequest) ProtoMessage() {}

func (x *AcceptInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{31}
}

func (x *AcceptInviteRequest) GetInviteBytes() []byte {
	if x != nil {
		return x.InviteBytes
	}
	return nil
}

// AcceptInviteResponse is the response to accepting an invite to KX with an user.
type AcceptInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// invite is the decoded invite accepted.
	Invite *OOBPublicIdentityInvite `protobuf:"bytes,1,opt,name=invite,proto3" json:"invite,omitempty"`
}

func (x *AcceptInviteResponse) Reset() {
	*x = AcceptInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteResponse) ProtoMessage() {}

func (x *AcceptInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{32}
}

func (x *AcceptInviteResponse) GetInvite() *OOBPublicIdentityInvite {
	if x != nil {
		return x.Invite
	}
	return nil
}

// InviteToGCRequest is the request to invite an user to a GC.
type InviteToGCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is the hex-encoded ID or the alias of the GC in the local client.
	Gc string `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
	// user is the hex-encoded ID of the user or its nick.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *InviteToGCRequest) Reset() {
	*x = InviteToGCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteToGCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteToGCRequest) ProtoMessage() {}

func (x *InviteToGCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteToGCRequest.ProtoReflect.Descriptor instead.
func (*InviteToGCRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{33}
}

func (x *InviteToGCRequest) GetGc() string {
	if x != nil {
		return x.Gc
	}
	return ""
}

func (x *InviteToGCRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// InviteToGCResponse is the response to the request to invite an user to a GC.
type InviteToGCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InviteToGCResponse) Reset() {
	*x = InviteToGCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteToGCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteToGCResponse) ProtoMessage() {}

func (x *InviteToGCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteToGCResponse.ProtoReflect.Descriptor instead.
func (*InviteToGCResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{34}
}

// AcceptGCInviteRequest is the request to accept an invite to join a GC.
type AcceptGCInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// invite_id is the id to use to join the invite.
	InviteId uint64 `protobuf:"varint,1,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
}

func (x *AcceptGCInviteRequest) Reset() {
	*x = AcceptGCInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptGCInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptGCInviteRequest) ProtoMessage() {}

func (x *AcceptGCInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptGCInviteRequest.ProtoReflect.Descriptor instead.
func (*AcceptGCInviteRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{35}
}

func (x *AcceptGCInviteRequest) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

// AcceptGCInviteResponse is the response to accept an invite to join a GC.
type AcceptGCInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcceptGCInviteResponse) Reset() {
	*x = AcceptGCInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptGCInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptGCInviteResponse) ProtoMessage() {}

func (x *AcceptGCInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptGCInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptGCInviteResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{36}
}

// SendFileRequest is the request to send a file to a user.
type SendFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user is the hex-encoded ID of the user or its nick.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// filename is the absolute path to the file.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *SendFileRequest) Reset() {
	*x = SendFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFileRequest) ProtoMessage() {}

func (x *SendFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFileRequest.ProtoReflect.Descriptor instead.
func (*SendFileRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{37}
}

func (x *SendFileRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SendFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// SendFileResponse is the response to sending a file to a user.
type SendFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendFileResponse) Reset() {
	*x = SendFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFileResponse) ProtoMessage() {}

func (x *SendFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFileResponse.ProtoReflect.Descriptor instead.
func (*SendFileResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{38}
}

// KickFromGCRequest is the request to kick an user from a GC.
type KickFromGCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is the hex-encoded ID or alias of the target GC.
	Gc string `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
	// user is the hex-encoded ID or nick of the target user.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// reason is an optional reason to send for the kick.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *KickFromGCRequest) Reset() {
	*x = KickFromGCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickFromGCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickFromGCRequest) ProtoMessage() {}

func (x *KickFromGCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickFromGCRequest.ProtoReflect.Descriptor instead.
func (*KickFromGCRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{39}
}

func (x *KickFromGCRequest) GetGc() string {
	if x != nil {
		return x.Gc
	}
	return ""
}

func (x *KickFromGCRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *KickFromGCRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// KickFromGCResponse is the response to a kick request.
type KickFromGCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KickFromGCResponse) Reset() {
	*x = KickFromGCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickFromGCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickFromGCResponse) ProtoMessage() {}

func (x *KickFromGCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickFromGCResponse.ProtoReflect.Descriptor instead.
func (*KickFromGCResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{40}
}

// GetGCRequest is the request to get GC datails.
type GetGCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is the hex-encoded ID or alias of the target GC.
	Gc string `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
}

func (x *GetGCRequest) Reset() {
	*x = GetGCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGCRequest) ProtoMessage() {}

func (x *GetGCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGCRequest.ProtoReflect.Descriptor instead.
func (*GetGCRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetGCRequest) GetGc() string {
	if x != nil {
		return x.Gc
	}
	return ""
}

// GetGCResponse is the response to a request to get GC details.
type GetGCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gc is the gc definition.
	Gc *RMGroupList `protobuf:"bytes,1,opt,name=gc,proto3" json:"gc,omitempty"`
}

func (x *GetGCResponse) Reset() {
	*x = GetGCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGCResponse) ProtoMessage() {}

func (x *GetGCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGCResponse.ProtoReflect.Descriptor instead.
func (*GetGCResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetGCResponse) GetGc() *RMGroupList {
	if x != nil {
		return x.Gc
	}
	return nil
}

// ListGCsRequest is the request to list GC data.
type ListGCsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGCsRequest) Reset() {
	*x = ListGCsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGCsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGCsRequest) ProtoMessage() {}

func (x *ListGCsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGCsRequest.ProtoReflect.Descriptor instead.
func (*ListGCsRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{43}
}

// ListGCsResponse is the response to a request to list GC data.
type ListGCsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gcs is the list of GCs for the local client.
	Gcs []*ListGCsResponse_GCInfo `protobuf:"bytes,1,rep,name=gcs,proto3" json:"gcs,omitempty"`
}

func (x *ListGCsResponse) Reset() {
	*x = ListGCsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGCsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGCsResponse) ProtoMessage() {}

func (x *ListGCsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGCsResponse.ProtoReflect.Descriptor instead.
func (*ListGCsResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{44}
}

func (x *ListGCsResponse) GetGcs() []*ListGCsResponse_GCInfo {
	if x != nil {
		return x.Gcs
	}
	return nil
}

// ReceivedGCInvitesRequest is the request to start receiving GC invite events.
type ReceivedGCInvitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last received
	// GC invite. Invites received by the server that have a higher sequence_id
	// will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *ReceivedGCInvitesRequest) Reset() {
	*x = ReceivedGCInvitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedGCInvitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedGCInvitesRequest) ProtoMessage() {}

func (x *ReceivedGCInvitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedGCInvitesRequest.ProtoReflect.Descriptor instead.
func (*ReceivedGCInvitesRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{45}
}

func (x *ReceivedGCInvitesRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// ReceivedGCInvite is the event sent when an invitation to join a GC is received.
type ReceivedGCInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// inviter_uid is the UID of the user that sent the invitation.
	InviterUid []byte `protobuf:"bytes,2,opt,name=inviter_uid,json=inviterUid,proto3" json:"inviter_uid,omitempty"`
	// inviter_nick is the nick of the user that sent the invitation.
	InviterNick string `protobuf:"bytes,3,opt,name=inviter_nick,json=inviterNick,proto3" json:"inviter_nick,omitempty"`
	// invite_id is the unique invite ID that must be spcecified when accepting
	// the invitation.
	InviteId uint64 `protobuf:"varint,4,opt,name=invite_id,json=inviteId,proto3" json:"invite_id,omitempty"`
	// invite is the invite information.
	Invite *RMGroupInvite `protobuf:"bytes,5,opt,name=invite,proto3" json:"invite,omitempty"`
}

func (x *ReceivedGCInvite) Reset() {
	*x = ReceivedGCInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedGCInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedGCInvite) ProtoMessage() {}

func (x *ReceivedGCInvite) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedGCInvite.ProtoReflect.Descriptor instead.
func (*ReceivedGCInvite) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{46}
}

func (x *ReceivedGCInvite) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *ReceivedGCInvite) GetInviterUid() []byte {
	if x != nil {
		return x.InviterUid
	}
	return nil
}

func (x *ReceivedGCInvite) GetInviterNick() string {
	if x != nil {
		return x.InviterNick
	}
	return ""
}

func (x *ReceivedGCInvite) GetInviteId() uint64 {
	if x != nil {
		return x.InviteId
	}
	return 0
}

func (x *ReceivedGCInvite) GetInvite() *RMGroupInvite {
	if x != nil {
		return x.Invite
	}
	return nil
}

// UserAndNick groups users and nicks when used in lists.
type UserAndNick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uid is the unique user ID.
	Uid []byte `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the local alias or nick of the user.
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	// known flags whether the local client is KX'd with this user.
	Known bool `protobuf:"varint,3,opt,name=known,proto3" json:"known,omitempty"`
}

func (x *UserAndNick) Reset() {
	*x = UserAndNick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAndNick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAndNick) ProtoMessage() {}

func (x *UserAndNick) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAndNick.ProtoReflect.Descriptor instead.
func (*UserAndNick) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{47}
}

func (x *UserAndNick) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *UserAndNick) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *UserAndNick) GetKnown() bool {
	if x != nil {
		return x.Known
	}
	return false
}

// GCMembersAddedRequest is the request sent to create a stream that receives
// GC members added events.
type GCMembersAddedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last received
	// GC members added event. Events received by the server that have a higher
	// sequence_id will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *GCMembersAddedRequest) Reset() {
	*x = GCMembersAddedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMembersAddedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMembersAddedRequest) ProtoMessage() {}

func (x *GCMembersAddedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMembersAddedRequest.ProtoReflect.Descriptor instead.
func (*GCMembersAddedRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{48}
}

func (x *GCMembersAddedRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// GCMembersAddedEvent are events received when a GC has new members.
type GCMembersAddedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// gc is the ID of the GC.
	Gc []byte `protobuf:"bytes,2,opt,name=gc,proto3" json:"gc,omitempty"`
	// gc_name is the local alias of the GC.
	GcName string `protobuf:"bytes,3,opt,name=gc_name,json=gcName,proto3" json:"gc_name,omitempty"`
	// users is the list of users added to the GC.
	Users []*UserAndNick `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GCMembersAddedEvent) Reset() {
	*x = GCMembersAddedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMembersAddedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMembersAddedEvent) ProtoMessage() {}

func (x *GCMembersAddedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMembersAddedEvent.ProtoReflect.Descriptor instead.
func (*GCMembersAddedEvent) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{49}
}

func (x *GCMembersAddedEvent) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GCMembersAddedEvent) GetGc() []byte {
	if x != nil {
		return x.Gc
	}
	return nil
}

func (x *GCMembersAddedEvent) GetGcName() string {
	if x != nil {
		return x.GcName
	}
	return ""
}

func (x *GCMembersAddedEvent) GetUsers() []*UserAndNick {
	if x != nil {
		return x.Users
	}
	return nil
}

// GCMembersRemovedRequest is the request to create a stream to receive GC
// members removed events.
type GCMembersRemovedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last received
	// GC members removed event. Events received by the server that have a higher
	// sequence_id will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *GCMembersRemovedRequest) Reset() {
	*x = GCMembersRemovedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMembersRemovedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMembersRemovedRequest) ProtoMessage() {}

func (x *GCMembersRemovedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMembersRemovedRequest.ProtoReflect.Descriptor instead.
func (*GCMembersRemovedRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{50}
}

func (x *GCMembersRemovedRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// GCMembersRemovedEvent is an event received when members are removed from a GC.
type GCMembersRemovedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// gc is the ID of the GC.
	Gc []byte `protobuf:"bytes,2,opt,name=gc,proto3" json:"gc,omitempty"`
	// gc_name is the local alias of the GC.
	GcName string `protobuf:"bytes,3,opt,name=gc_name,json=gcName,proto3" json:"gc_name,omitempty"`
	// users is the list of users removed from the GC.
	Users []*UserAndNick `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *GCMembersRemovedEvent) Reset() {
	*x = GCMembersRemovedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCMembersRemovedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCMembersRemovedEvent) ProtoMessage() {}

func (x *GCMembersRemovedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCMembersRemovedEvent.ProtoReflect.Descriptor instead.
func (*GCMembersRemovedEvent) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{51}
}

func (x *GCMembersRemovedEvent) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *GCMembersRemovedEvent) GetGc() []byte {
	if x != nil {
		return x.Gc
	}
	return nil
}

func (x *GCMembersRemovedEvent) GetGcName() string {
	if x != nil {
		return x.GcName
	}
	return ""
}

func (x *GCMembersRemovedEvent) GetUsers() []*UserAndNick {
	if x != nil {
		return x.Users
	}
	return nil
}

// JoinedGCsRequest is the request to create a stream that receives events about
// GCs the local client has joined.
type JoinedGCsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last received
	// GC joined event. Events received by the server that have a higher
	// sequence_id will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *JoinedGCsRequest) Reset() {
	*x = JoinedGCsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedGCsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedGCsRequest) ProtoMessage() {}

func (x *JoinedGCsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedGCsRequest.ProtoReflect.Descriptor instead.
func (*JoinedGCsRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{52}
}

func (x *JoinedGCsRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// JoinedGCEvent is the event received when the local client joins a GC.
type JoinedGCEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// gc is the GC definition.
	Gc *RMGroupList `protobuf:"bytes,2,opt,name=gc,proto3" json:"gc,omitempty"`
}

func (x *JoinedGCEvent) Reset() {
	*x = JoinedGCEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinedGCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinedGCEvent) ProtoMessage() {}

func (x *JoinedGCEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinedGCEvent.ProtoReflect.Descriptor instead.
func (*JoinedGCEvent) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{53}
}

func (x *JoinedGCEvent) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *JoinedGCEvent) GetGc() *RMGroupList {
	if x != nil {
		return x.Gc
	}
	return nil
}

// TipProgressRequest is the request to create a stream that receives events
// about the progress of TipUser requests.
type TipProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unacked_from specifies to the server the sequence_id of the last received
	// tip progress event. Events received by the server that have a higher
	// sequence_id will be streamed back to the client.
	UnackedFrom uint64 `protobuf:"varint,1,opt,name=unacked_from,json=unackedFrom,proto3" json:"unacked_from,omitempty"`
}

func (x *TipProgressRequest) Reset() {
	*x = TipProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipProgressRequest) ProtoMessage() {}

func (x *TipProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipProgressRequest.ProtoReflect.Descriptor instead.
func (*TipProgressRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{54}
}

func (x *TipProgressRequest) GetUnackedFrom() uint64 {
	if x != nil {
		return x.UnackedFrom
	}
	return 0
}

// TipProgressEvent details the progress of a TipUser request.
type TipProgressEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequence_id is an opaque sequential ID.
	SequenceId uint64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// uid is the User ID of the TipUser target.
	Uid []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the nick of the TipUser target.
	Nick string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	// amount_matoms is the amount being tipped in milli-atoms.
	AmountMatoms int64 `protobuf:"varint,4,opt,name=amount_matoms,json=amountMatoms,proto3" json:"amount_matoms,omitempty"`
	// completed flags whether the TipUser request was successfully completed
	// (i.e. if the tip was paid).
	Completed bool `protobuf:"varint,5,opt,name=completed,proto3" json:"completed,omitempty"`
	// attempt is the attempt number.
	Attempt int32 `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// attempt_err is filled when the attempt to fetch an invoice or perform
	// the payment for a received invoice failed.
	AttemptErr string `protobuf:"bytes,7,opt,name=attempt_err,json=attemptErr,proto3" json:"attempt_err,omitempty"`
	// will_retry flags whether a new attempt to request an invoice and perform
	// a payment will be done or if no more attempts will happen.
	WillRetry bool `protobuf:"varint,8,opt,name=will_retry,json=willRetry,proto3" json:"will_retry,omitempty"`
}

func (x *TipProgressEvent) Reset() {
	*x = TipProgressEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipProgressEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipProgressEvent) ProtoMessage() {}

func (x *TipProgressEvent) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipProgressEvent.ProtoReflect.Descriptor instead.
func (*TipProgressEvent) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{55}
}

func (x *TipProgressEvent) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *TipProgressEvent) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *TipProgressEvent) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *TipProgressEvent) GetAmountMatoms() int64 {
	if x != nil {
		return x.AmountMatoms
	}
	return 0
}

func (x *TipProgressEvent) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *TipProgressEvent) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *TipProgressEvent) GetAttemptErr() string {
	if x != nil {
		return x.AttemptErr
	}
	return ""
}

func (x *TipProgressEvent) GetWillRetry() bool {
	if x != nil {
		return x.WillRetry
	}
	return false
}

// ResourceRequestsStreamRequest is the request for a stream to receive resource
// requests.
type ResourceRequestsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceRequestsStreamRequest) Reset() {
	*x = ResourceRequestsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequestsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequestsStreamRequest) ProtoMessage() {}

func (x *ResourceRequestsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequestsStreamRequest.ProtoReflect.Descriptor instead.
func (*ResourceRequestsStreamRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{56}
}

// ResourceRequestsStreamResponse is the a request made by a remote client for
// one of the local client's resources.
type ResourceRequestsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is an opaque ID to link requests and responses made through the clientrpc
	// interface.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// uid is the User ID of the client that requested the resource.
	Uid []byte `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// nick is the nick of the client that requested the resource.
	Nick string `protobuf:"bytes,3,opt,name=nick,proto3" json:"nick,omitempty"`
	// request is the actual request made by the remote client.
	Request *RMFetchResource `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ResourceRequestsStreamResponse) Reset() {
	*x = ResourceRequestsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequestsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequestsStreamResponse) ProtoMessage() {}

func (x *ResourceRequestsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequestsStreamResponse.ProtoReflect.Descriptor instead.
func (*ResourceRequestsStreamResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{57}
}

func (x *ResourceRequestsStreamResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResourceRequestsStreamResponse) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *ResourceRequestsStreamResponse) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *ResourceRequestsStreamResponse) GetRequest() *RMFetchResource {
	if x != nil {
		return x.Request
	}
	return nil
}

// FulfillResourceRequest fulfills a remote request for a local client resource.
type FulfillResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id must be the corresponding request received by the clientrpc client.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// error_msg is an optional error message to fail the request with.
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// response is the actual resource that should be sent to the remote client.
	Response *RMFetchResourceReply `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FulfillResourceRequest) Reset() {
	*x = FulfillResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulfillResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulfillResourceRequest) ProtoMessage() {}

func (x *FulfillResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulfillResourceRequest.ProtoReflect.Descriptor instead.
func (*FulfillResourceRequest) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{58}
}

func (x *FulfillResourceRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FulfillResourceRequest) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *FulfillResourceRequest) GetResponse() *RMFetchResourceReply {
	if x != nil {
		return x.Response
	}
	return nil
}

// FulfillResourceRequestResponse is the response to a FulfillResourceResquest
// call.
type FulfillResourceRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FulfillResourceRequestResponse) Reset() {
	*x = FulfillResourceRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulfillResourceRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulfillResourceRequestResponse) ProtoMessage() {}

func (x *FulfillResourceRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulfillResourceRequestResponse.ProtoReflect.Descriptor instead.
func (*FulfillResourceRequestResponse) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{59}
}

// RMPrivateMessage is the network-level routed private message.
type RMPrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message is the private message payload.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// mode is the message mode.
	Mode MessageMode `protobuf:"varint,2,opt,name=mode,proto3,enum=MessageMode" json:"mode,omitempty"`
}

func (x *RMPrivateMessage) Reset() {
	*x = RMPrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMPrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMPrivateMessage) ProtoMessage() {}

func (x *RMPrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMPrivateMessage.ProtoReflect.Descriptor instead.
func (*RMPrivateMessage) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{60}
}

func (x *RMPrivateMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RMPrivateMessage) GetMode() MessageMode {
	if x != nil {
		return x.Mode
	}
	return MessageMode_MESSAGE_MODE_NORMAL
}

// RMGroupMessage is the network-level routed group message.
type RMGroupMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the group chat id where the message was sent.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// generation is the internal generation of the group chat metadata when the
	// sender sent this message.
	Generation uint64 `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	// message is the textual content.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// mode is the mode of the message.
	Mode MessageMode `protobuf:"varint,4,opt,name=mode,proto3,enum=MessageMode" json:"mode,omitempty"`
}

func (x *RMGroupMessage) Reset() {
	*x = RMGroupMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMGroupMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMGroupMessage) ProtoMessage() {}

func (x *RMGroupMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMGroupMessage.ProtoReflect.Descriptor instead.
func (*RMGroupMessage) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{61}
}

func (x *RMGroupMessage) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RMGroupMessage) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *RMGroupMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RMGroupMessage) GetMode() MessageMode {
	if x != nil {
		return x.Mode
	}
	return MessageMode_MESSAGE_MODE_NORMAL
}

// PostMetadata is the network-level post data.
type PostMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version defines the available fields within attributes.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// attributes defines the available post attributes.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostMetadata) Reset() {
	*x = PostMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMetadata) ProtoMessage() {}

func (x *PostMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMetadata.ProtoReflect.Descriptor instead.
func (*PostMetadata) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{62}
}

func (x *PostMetadata) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PostMetadata) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// PostMetadataStatus is the network-level post status update data.
type PostMetadataStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// version defines the available fields within attributes.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// from is the UID of the original status creator.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// link is the ID of the post.
	Link string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	// attributes is the list of post update attributes.
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostMetadataStatus) Reset() {
	*x = PostMetadataStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMetadataStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMetadataStatus) ProtoMessage() {}

func (x *PostMetadataStatus) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMetadataStatus.ProtoReflect.Descriptor instead.
func (*PostMetadataStatus) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{63}
}

func (x *PostMetadataStatus) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PostMetadataStatus) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *PostMetadataStatus) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PostMetadataStatus) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// PublicIdentity is the lowlevel public identity.
type PublicIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// nick is the short name/alias of the user.
	Nick string `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	// sig_key is the signature key used to authenticate messages from the user.
	SigKey []byte `protobuf:"bytes,3,opt,name=sig_key,json=sigKey,proto3" json:"sig_key,omitempty"`
	// key is the NTRU public key of the user.
	Key []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// identity is the public ID of the user.
	Identity []byte `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	// digest is a hash of the user's public information.
	Digest []byte `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
	// signature is a signature of the user's public information.
	Signature []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PublicIdentity) Reset() {
	*x = PublicIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicIdentity) ProtoMessage() {}

func (x *PublicIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicIdentity.ProtoReflect.Descriptor instead.
func (*PublicIdentity) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{64}
}

func (x *PublicIdentity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicIdentity) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *PublicIdentity) GetSigKey() []byte {
	if x != nil {
		return x.SigKey
	}
	return nil
}

func (x *PublicIdentity) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PublicIdentity) GetIdentity() []byte {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *PublicIdentity) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *PublicIdentity) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// InviteFunds is the lowlevel information about funds added to an invite.
type InviteFunds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tx is the hash of the transaction that includes the funds.
	Tx string `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// index is the output index of the transaction that includes the funds.
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// tree is the tree of the transaction that includes the funds.
	Tree int32 `protobuf:"varint,3,opt,name=tree,proto3" json:"tree,omitempty"`
	// private_key is the private key needed to redeem the funds in the transaction.
	PrivateKey string `protobuf:"bytes,4,opt,name=private_key,proto3" json:"private_key,omitempty"`
	// height_hint is a height at or before the transaction that includes the funds
	// is mined in.
	HeightHint uint32 `protobuf:"varint,5,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	// address is the public address that the funds were sent to.
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *InviteFunds) Reset() {
	*x = InviteFunds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFunds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFunds) ProtoMessage() {}

func (x *InviteFunds) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFunds.ProtoReflect.Descriptor instead.
func (*InviteFunds) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{65}
}

func (x *InviteFunds) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *InviteFunds) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InviteFunds) GetTree() int32 {
	if x != nil {
		return x.Tree
	}
	return 0
}

func (x *InviteFunds) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *InviteFunds) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

func (x *InviteFunds) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// OOBPublicIdentityInvite is an out-of-band invite to perform a KX.
type OOBPublicIdentityInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public is the public identity of the inviter.
	Public *PublicIdentity `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	// initial_rendezvous is the initial random RV where key exchange will happen.
	InitialRendezvous []byte `protobuf:"bytes,2,opt,name=initial_rendezvous,json=initialrendezvous,proto3" json:"initial_rendezvous,omitempty"`
	// reset_rendezvous is the inviter's reset RV in case of ratchet reset actions.
	ResetRendezvous []byte `protobuf:"bytes,3,opt,name=reset_rendezvous,json=resetrendezvous,proto3" json:"reset_rendezvous,omitempty"`
	// funds are funds that may be included in the invite and are redeemable by
	// the invitee.
	Funds *InviteFunds `protobuf:"bytes,4,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (x *OOBPublicIdentityInvite) Reset() {
	*x = OOBPublicIdentityInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OOBPublicIdentityInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OOBPublicIdentityInvite) ProtoMessage() {}

func (x *OOBPublicIdentityInvite) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OOBPublicIdentityInvite.ProtoReflect.Descriptor instead.
func (*OOBPublicIdentityInvite) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{66}
}

func (x *OOBPublicIdentityInvite) GetPublic() *PublicIdentity {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *OOBPublicIdentityInvite) GetInitialRendezvous() []byte {
	if x != nil {
		return x.InitialRendezvous
	}
	return nil
}

func (x *OOBPublicIdentityInvite) GetResetRendezvous() []byte {
	if x != nil {
		return x.ResetRendezvous
	}
	return nil
}

func (x *OOBPublicIdentityInvite) GetFunds() *InviteFunds {
	if x != nil {
		return x.Funds
	}
	return nil
}

// RMGroupInvite is the information about an invite to join a GC.
type RMGroupInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the GC.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the name of the GC.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// token is a random number that must be sent back by the invitee to the inviter.
	Token uint64 `protobuf:"varint,3,opt,name=token,proto3" json:"token,omitempty"`
	// description is a description of the GC.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// expires is a timestamp for when the invitation expires.
	Expires int64 `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	// version is the version of the current definition of the GC.
	Version uint32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RMGroupInvite) Reset() {
	*x = RMGroupInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMGroupInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMGroupInvite) ProtoMessage() {}

func (x *RMGroupInvite) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMGroupInvite.ProtoReflect.Descriptor instead.
func (*RMGroupInvite) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{67}
}

func (x *RMGroupInvite) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RMGroupInvite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RMGroupInvite) GetToken() uint64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *RMGroupInvite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RMGroupInvite) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *RMGroupInvite) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// RMGroupList is the full definition of a GC.
type RMGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the ID of the GC.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the name of the GC.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// generation is a monotonically increasing count of GC changes.
	Generation uint64 `protobuf:"varint,3,opt,name=generation,proto3" json:"generation,omitempty"`
	// timestamp is the timestamp for the last modification of the GC defintions.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// version is the GC rules version.
	Version uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	// members is the list of user IDs that are in the GC.
	Members [][]byte `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	// extra_admins is the list of user IDs that are additional admins of the GC.
	ExtraAdmins [][]byte `protobuf:"bytes,7,rep,name=extra_admins,proto3" json:"extra_admins,omitempty"`
}

func (x *RMGroupList) Reset() {
	*x = RMGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMGroupList) ProtoMessage() {}

func (x *RMGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMGroupList.ProtoReflect.Descriptor instead.
func (*RMGroupList) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{68}
}

func (x *RMGroupList) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RMGroupList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RMGroupList) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *RMGroupList) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RMGroupList) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RMGroupList) GetMembers() [][]byte {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *RMGroupList) GetExtraAdmins() [][]byte {
	if x != nil {
		return x.ExtraAdmins
	}
	return nil
}

// RMFetchResource is the lowlevel request to fetch a resource.
type RMFetchResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// path is the resource's path (already split into segments).
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	// meta is metadata associated with the request.
	Meta map[string]string `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// tag is a unique tag that should be relayed back on the reply.
	Tag uint64 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// data is raw request data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// index is used in chunked/multipart requests.
	Index uint32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	// count is the total number of chunks in multipart requests.
	Count uint32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RMFetchResource) Reset() {
	*x = RMFetchResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMFetchResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMFetchResource) ProtoMessage() {}

func (x *RMFetchResource) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMFetchResource.ProtoReflect.Descriptor instead.
func (*RMFetchResource) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{69}
}

func (x *RMFetchResource) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *RMFetchResource) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RMFetchResource) GetTag() uint64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *RMFetchResource) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RMFetchResource) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RMFetchResource) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// RMFetchResourceReply is the lowlevel resource response.
type RMFetchResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag is the same as the request tag.
	Tag uint64 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// status is the general status of the response.
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// meta is additional response metadata.
	Meta map[string]string `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// data is the raw response data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// index is used in chunked/multipart responses.
	Index uint32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	// count is the total number of chunks in multipart responses.
	Count uint32 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RMFetchResourceReply) Reset() {
	*x = RMFetchResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RMFetchResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RMFetchResourceReply) ProtoMessage() {}

func (x *RMFetchResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RMFetchResourceReply.ProtoReflect.Descriptor instead.
func (*RMFetchResourceReply) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{70}
}

func (x *RMFetchResourceReply) GetTag() uint64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *RMFetchResourceReply) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RMFetchResourceReply) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RMFetchResourceReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RMFetchResourceReply) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RMFetchResourceReply) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// GCInfo is the summary info for a GC.
type ListGCsResponse_GCInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the unique GC ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the local name/alias for the GC.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// version is the current version the GC definition is on.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// timestamp is the timestamp of the last modification to the GC definition.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// nb_members is the total number of members in the GC.
	NbMembers uint32 `protobuf:"varint,5,opt,name=nb_members,json=nbMembers,proto3" json:"nb_members,omitempty"`
}

func (x *ListGCsResponse_GCInfo) Reset() {
	*x = ListGCsResponse_GCInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientrpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGCsResponse_GCInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGCsResponse_GCInfo) ProtoMessage() {}

func (x *ListGCsResponse_GCInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clientrpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGCsResponse_GCInfo.ProtoReflect.Descriptor instead.
func (*ListGCsResponse_GCInfo) Descriptor() ([]byte, []int) {
	return file_clientrpc_proto_rawDescGZIP(), []int{44, 0}
}

func (x *ListGCsResponse_GCInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListGCsResponse_GCInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGCsResponse_GCInfo) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListGCsResponse_GCInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ListGCsResponse_GCInfo) GetNbMembers() uint32 {
	if x != nil {
		return x.NbMembers
	}
	return 0
}

var File_clientrpc_proto protoreflect.FileDescriptor

var file_clientrpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x34, 0x0a, 0x16, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x0e, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2d, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x4d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x0c, 0x0a, 0x0a, 0x50,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x0f, 0x50, 0x4d, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22,
	0x9b, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x4d, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x52, 0x4d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x0a, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x0d, 0x0a,
	0x0b, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x10,
	0x47, 0x43, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x47, 0x43, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x63, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x63, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a,
	0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x19, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x50, 0x6f, 0x73,
	0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x70,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xe5, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x22, 0x66, 0x0a, 0x0e, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x63, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x64, 0x63, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x11, 0x0a,
	0x0f, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x46, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a,
	0x0f, 0x4b, 0x58, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x4b, 0x58, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x15, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x67, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x4f, 0x42, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0x38, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x14,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x4f, 0x42, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x06,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x14, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47,
	0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x11,
	0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x14, 0x0a,
	0x12, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x67, 0x63, 0x22, 0x2d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x02,
	0x67, 0x63, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x43, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x43, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x43, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x67, 0x63, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x06, 0x47, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x62,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x18, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x22, 0x3a, 0x0a, 0x15, 0x47, 0x43, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x83,
	0x01, 0x0a, 0x13, 0x47, 0x43, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x43, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x47, 0x43, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x67, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x63, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x4e,
	0x69, 0x63, 0x6b, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x10, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x43, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x22, 0x4e, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x43, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x02, 0x67,
	0x63, 0x22, 0x37, 0x0a, 0x12, 0x54, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75,
	0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x54,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x45, 0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x2a, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x52, 0x4d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x16, 0x46, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x4d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x52, 0x4d, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a,
	0x12, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x4f, 0x4f, 0x42,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0d,
	0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01,
	0x0a, 0x0b, 0x52, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x52, 0x4d, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x52, 0x4d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x52,
	0x4d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x4d,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3b, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x10, 0x01, 0x32, 0x7d, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x4b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x32, 0xc6, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x50, 0x4d, 0x12, 0x0a, 0x2e,
	0x50, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x50, 0x4d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x50, 0x4d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x10, 0x2e, 0x50, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50,
	0x4d, 0x30, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x4d, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x03, 0x47, 0x43, 0x4d, 0x12, 0x0b, 0x2e, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x47, 0x43, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x43, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11,
	0x2e, 0x47, 0x43, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x47, 0x43, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x73,
	0x67, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x47, 0x43, 0x4d, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x12, 0x11, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x4b, 0x58, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x4b, 0x58, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x10, 0x2e, 0x4b, 0x58, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x4b, 0x58, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x30, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x41, 0x63, 0x6b, 0x4b, 0x58, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x16, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x14, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xc8, 0x05, 0x0a, 0x09, 0x47, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x43, 0x12, 0x12, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47,
	0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x4b, 0x69, 0x63, 0x6b,
	0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43, 0x12, 0x12, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x4b, 0x69, 0x63,
	0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x47, 0x43, 0x12, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x43, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x43, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x43,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x43, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x14, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x47, 0x43, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x47, 0x43, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x43, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x41, 0x63,
	0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x0b, 0x2e,
	0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x47, 0x43, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x43, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x2e,
	0x0a, 0x11, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x43, 0x73, 0x12, 0x11, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x43, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x43, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01,
	0x12, 0x29, 0x0a, 0x0c, 0x41, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x43, 0x73,
	0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x84, 0x03, 0x0a, 0x0c,
	0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x18, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0x32,
	0x0a, 0x15, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xa5, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0f, 0x2e, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x54, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x54, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x13, 0x2e, 0x54, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x54, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x41, 0x63, 0x6b, 0x54, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0b, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb3, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x53, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x7a, 0x65, 0x72, 0x6f, 0x2f, 0x62, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x72, 0x70, 0x63,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientrpc_proto_rawDescOnce sync.Once
	file_clientrpc_proto_rawDescData = file_clientrpc_proto_rawDesc
)

func file_clientrpc_proto_rawDescGZIP() []byte {
	file_clientrpc_proto_rawDescOnce.Do(func() {
		file_clientrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientrpc_proto_rawDescData)
	})
	return file_clientrpc_proto_rawDescData
}

var file_clientrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_clientrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 76)
var file_clientrpc_proto_goTypes = []interface{}{
	(MessageMode)(0),                       // 0: MessageMode
	(*VersionRequest)(nil),                 // 1: VersionRequest
	(*VersionResponse)(nil),                // 2: VersionResponse
	(*KeepaliveStreamRequest)(nil),         // 3: KeepaliveStreamRequest
	(*KeepaliveEvent)(nil),                 // 4: KeepaliveEvent
	(*AckRequest)(nil),                     // 5: AckRequest
	(*AckResponse)(nil),                    // 6: AckResponse
	(*PMRequest)(nil),                      // 7: PMRequest
	(*PMResponse)(nil),                     // 8: PMResponse
	(*PMStreamRequest)(nil),                // 9: PMStreamRequest
	(*ReceivedPM)(nil),                     // 10: ReceivedPM
	(*GCMRequest)(nil),                     // 11: GCMRequest
	(*GCMResponse)(nil),                    // 12: GCMResponse
	(*GCMStreamRequest)(nil),               // 13: GCMStreamRequest
	(*GCReceivedMsg)(nil),                  // 14: GCReceivedMsg
	(*SubscribeToPostsRequest)(nil),        // 15: SubscribeToPostsRequest
	(*SubscribeToPostsResponse)(nil),       // 16: SubscribeToPostsResponse
	(*UnsubscribeToPostsRequest)(nil),      // 17: UnsubscribeToPostsRequest
	(*UnsubscribeToPostsResponse)(nil),     // 18: UnsubscribeToPostsResponse
	(*PostSummary)(nil),                    // 19: PostSummary
	(*PostsStreamRequest)(nil),             // 20: PostsStreamRequest
	(*ReceivedPost)(nil),                   // 21: ReceivedPost
	(*PostsStatusStreamRequest)(nil),       // 22: PostsStatusStreamRequest
	(*ReceivedPostStatus)(nil),             // 23: ReceivedPostStatus
	(*TipUserRequest)(nil),                 // 24: TipUserRequest
	(*TipUserResponse)(nil),                // 25: TipUserResponse
	(*MediateKXRequest)(nil),               // 26: MediateKXRequest
	(*MediateKXResponse)(nil),              // 27: MediateKXResponse
	(*KXStreamRequest)(nil),                // 28: KXStreamRequest
	(*KXCompleted)(nil),                    // 29: KXCompleted
	(*WriteNewInviteRequest)(nil),          // 30: WriteNewInviteRequest
	(*WriteNewInviteResponse)(nil),         // 31: WriteNewInviteResponse
	(*AcceptInviteRequest)(nil),            // 32: AcceptInviteRequest
	(*AcceptInviteResponse)(nil),           // 33: AcceptInviteResponse
	(*InviteToGCRequest)(nil),              // 34: InviteToGCRequest
	(*InviteToGCResponse)(nil),             // 35: InviteToGCResponse
	(*AcceptGCInviteRequest)(nil),          // 36: AcceptGCInviteRequest
	(*AcceptGCInviteResponse)(nil),         // 37: AcceptGCInviteResponse
	(*SendFileRequest)(nil),                // 38: SendFileRequest
	(*SendFileResponse)(nil),               // 39: SendFileResponse
	(*KickFromGCRequest)(nil),              // 40: KickFromGCRequest
	(*KickFromGCResponse)(nil),             // 41: KickFromGCResponse
	(*GetGCRequest)(nil),                   // 42: GetGCRequest
	(*GetGCResponse)(nil),                  // 43: GetGCResponse
	(*ListGCsRequest)(nil),                 // 44: ListGCsRequest
	(*ListGCsResponse)(nil),                // 45: ListGCsResponse
	(*ReceivedGCInvitesRequest)(nil),       // 46: ReceivedGCInvitesRequest
	(*ReceivedGCInvite)(nil),               // 47: ReceivedGCInvite
	(*UserAndNick)(nil),                    // 48: UserAndNick
	(*GCMembersAddedRequest)(nil),          // 49: GCMembersAddedRequest
	(*GCMembersAddedEvent)(nil),            // 50: GCMembersAddedEvent
	(*GCMembersRemovedRequest)(nil),        // 51: GCMembersRemovedRequest
	(*GCMembersRemovedEvent)(nil),          // 52: GCMembersRemovedEvent
	(*JoinedGCsRequest)(nil),               // 53: JoinedGCsRequest
	(*JoinedGCEvent)(nil),                  // 54: JoinedGCEvent
	(*TipProgressRequest)(nil),             // 55: TipProgressRequest
	(*TipProgressEvent)(nil),               // 56: TipProgressEvent
	(*ResourceRequestsStreamRequest)(nil),  // 57: ResourceRequestsStreamRequest
	(*ResourceRequestsStreamResponse)(nil), // 58: ResourceRequestsStreamResponse
	(*FulfillResourceRequest)(nil),         // 59: FulfillResourceRequest
	(*FulfillResourceRequestResponse)(nil), // 60: FulfillResourceRequestResponse
	(*RMPrivateMessage)(nil),               // 61: RMPrivateMessage
	(*RMGroupMessage)(nil),                 // 62: RMGroupMessage
	(*PostMetadata)(nil),                   // 63: PostMetadata
	(*PostMetadataStatus)(nil),             // 64: PostMetadataStatus
	(*PublicIdentity)(nil),                 // 65: PublicIdentity
	(*InviteFunds)(nil),                    // 66: InviteFunds
	(*OOBPublicIdentityInvite)(nil),        // 67: OOBPublicIdentityInvite
	(*RMGroupInvite)(nil),                  // 68: RMGroupInvite
	(*RMGroupList)(nil),                    // 69: RMGroupList
	(*RMFetchResource)(nil),                // 70: RMFetchResource
	(*RMFetchResourceReply)(nil),           // 71: RMFetchResourceReply
	(*ListGCsResponse_GCInfo)(nil),         // 72: ListGCsResponse.GCInfo
	nil,                                    // 73: PostMetadata.AttributesEntry
	nil,                                    // 74: PostMetadataStatus.AttributesEntry
	nil,                                    // 75: RMFetchResource.MetaEntry
	nil,                                    // 76: RMFetchResourceReply.MetaEntry
}
var file_clientrpc_proto_depIdxs = []int32{
	61, // 0: PMRequest.msg:type_name -> RMPrivateMessage
	61, // 1: ReceivedPM.msg:type_name -> RMPrivateMessage
	62, // 2: GCReceivedMsg.msg:type_name -> RMGroupMessage
	19, // 3: ReceivedPost.summary:type_name -> PostSummary
	63, // 4: ReceivedPost.post:type_name -> PostMetadata
	64, // 5: ReceivedPostStatus.status:type_name -> PostMetadataStatus
	67, // 6: WriteNewInviteResponse.invite:type_name -> OOBPublicIdentityInvite
	67, // 7: AcceptInviteResponse.invite:type_name -> OOBPublicIdentityInvite
	69, // 8: GetGCResponse.gc:type_name -> RMGroupList
	72, // 9: ListGCsResponse.gcs:type_name -> ListGCsResponse.GCInfo
	68, // 10: ReceivedGCInvite.invite:type_name -> RMGroupInvite
	48, // 11: GCMembersAddedEvent.users:type_name -> UserAndNick
	48, // 12: GCMembersRemovedEvent.users:type_name -> UserAndNick
	69, // 13: JoinedGCEvent.gc:type_name -> RMGroupList
	70, // 14: ResourceRequestsStreamResponse.request:type_name -> RMFetchResource
	71, // 15: FulfillResourceRequest.response:type_name -> RMFetchResourceReply
	0,  // 16: RMPrivateMessage.mode:type_name -> MessageMode
	0,  // 17: RMGroupMessage.mode:type_name -> MessageMode
	73, // 18: PostMetadata.attributes:type_name -> PostMetadata.AttributesEntry
	74, // 19: PostMetadataStatus.attributes:type_name -> PostMetadataStatus.AttributesEntry
	65, // 20: OOBPublicIdentityInvite.public:type_name -> PublicIdentity
	66, // 21: OOBPublicIdentityInvite.funds:type_name -> InviteFunds
	75, // 22: RMFetchResource.meta:type_name -> RMFetchResource.MetaEntry
	76, // 23: RMFetchResourceReply.meta:type_name -> RMFetchResourceReply.MetaEntry
	1,  // 24: VersionService.Version:input_type -> VersionRequest
	3,  // 25: VersionService.KeepaliveStream:input_type -> KeepaliveStreamRequest
	7,  // 26: ChatService.PM:input_type -> PMRequest
	9,  // 27: ChatService.PMStream:input_type -> PMStreamRequest
	5,  // 28: ChatService.AckReceivedPM:input_type -> AckRequest
	11, // 29: ChatService.GCM:input_type -> GCMRequest
	13, // 30: ChatService.GCMStream:input_type -> GCMStreamRequest
	5,  // 31: ChatService.AckReceivedGCM:input_type -> AckRequest
	26, // 32: ChatService.MediateKX:input_type -> MediateKXRequest
	28, // 33: ChatService.KXStream:input_type -> KXStreamRequest
	5,  // 34: ChatService.AckKXCompleted:input_type -> AckRequest
	30, // 35: ChatService.WriteNewInvite:input_type -> WriteNewInviteRequest
	32, // 36: ChatService.AcceptInvite:input_type -> AcceptInviteRequest
	38, // 37: ChatService.SendFile:input_type -> SendFileRequest
	34, // 38: GCService.InviteToGC:input_type -> InviteToGCRequest
	36, // 39: GCService.AcceptGCInvite:input_type -> AcceptGCInviteRequest
	40, // 40: GCService.KickFromGC:input_type -> KickFromGCRequest
	42, // 41: GCService.GetGC:input_type -> GetGCRequest
	44, // 42: GCService.List:input_type -> ListGCsRequest
	46, // 43: GCService.ReceivedGCInvites:input_type -> ReceivedGCInvitesRequest
	5,  // 44: GCService.AckReceivedGCInvites:input_type -> AckRequest
	49, // 45: GCService.MembersAdded:input_type -> GCMembersAddedRequest
	5,  // 46: GCService.AckMembersAdded:input_type -> AckRequest
	51, // 47: GCService.MembersRemoved:input_type -> GCMembersRemovedRequest
	5,  // 48: GCService.AckMembersRemoved:input_type -> AckRequest
	53, // 49: GCService.JoinedGCs:input_type -> JoinedGCsRequest
	5,  // 50: GCService.AckJoinedGCs:input_type -> AckRequest
	15, // 51: PostsService.SubscribeToPosts:input_type -> SubscribeToPostsRequest
	17, // 52: PostsService.UnsubscribeToPosts:input_type -> UnsubscribeToPostsRequest
	20, // 53: PostsService.PostsStream:input_type -> PostsStreamRequest
	5,  // 54: PostsService.AckReceivedPost:input_type -> AckRequest
	22, // 55: PostsService.PostsStatusStream:input_type -> PostsStatusStreamRequest
	5,  // 56: PostsService.AckReceivedPostStatus:input_type -> AckRequest
	24, // 57: PaymentsService.TipUser:input_type -> TipUserRequest
	55, // 58: PaymentsService.TipProgress:input_type -> TipProgressRequest
	5,  // 59: PaymentsService.AckTipProgress:input_type -> AckRequest
	57, // 60: ResourcesService.RequestsStream:input_type -> ResourceRequestsStreamRequest
	59, // 61: ResourcesService.FulfillRequest:input_type -> FulfillResourceRequest
	2,  // 62: VersionService.Version:output_type -> VersionResponse
	4,  // 63: VersionService.KeepaliveStream:output_type -> KeepaliveEvent
	8,  // 64: ChatService.PM:output_type -> PMResponse
	10, // 65: ChatService.PMStream:output_type -> ReceivedPM
	6,  // 66: ChatService.AckReceivedPM:output_type -> AckResponse
	12, // 67: ChatService.GCM:output_type -> GCMResponse
	14, // 68: ChatService.GCMStream:output_type -> GCReceivedMsg
	6,  // 69: ChatService.AckReceivedGCM:output_type -> AckResponse
	27, // 70: ChatService.MediateKX:output_type -> MediateKXResponse
	29, // 71: ChatService.KXStream:output_type -> KXCompleted
	6,  // 72: ChatService.AckKXCompleted:output_type -> AckResponse
	31, // 73: ChatService.WriteNewInvite:output_type -> WriteNewInviteResponse
	33, // 74: ChatService.AcceptInvite:output_type -> AcceptInviteResponse
	39, // 75: ChatService.SendFile:output_type -> SendFileResponse
	35, // 76: GCService.InviteToGC:output_type -> InviteToGCResponse
	37, // 77: GCService.AcceptGCInvite:output_type -> AcceptGCInviteResponse
	41, // 78: GCService.KickFromGC:output_type -> KickFromGCResponse
	43, // 79: GCService.GetGC:output_type -> GetGCResponse
	45, // 80: GCService.List:output_type -> ListGCsResponse
	47, // 81: GCService.ReceivedGCInvites:output_type -> ReceivedGCInvite
	6,  // 82: GCService.AckReceivedGCInvites:output_type -> AckResponse
	50, // 83: GCService.MembersAdded:output_type -> GCMembersAddedEvent
	6,  // 84: GCService.AckMembersAdded:output_type -> AckResponse
	52, // 85: GCService.MembersRemoved:output_type -> GCMembersRemovedEvent
	6,  // 86: GCService.AckMembersRemoved:output_type -> AckResponse
	54, // 87: GCService.JoinedGCs:output_type -> JoinedGCEvent
	6,  // 88: GCService.AckJoinedGCs:output_type -> AckResponse
	16, // 89: PostsService.SubscribeToPosts:output_type -> SubscribeToPostsResponse
	18, // 90: PostsService.UnsubscribeToPosts:output_type -> UnsubscribeToPostsResponse
	21, // 91: PostsService.PostsStream:output_type -> ReceivedPost
	6,  // 92: PostsService.AckReceivedPost:output_type -> AckResponse
	23, // 93: PostsService.PostsStatusStream:output_type -> ReceivedPostStatus
	6,  // 94: PostsService.AckReceivedPostStatus:output_type -> AckResponse
	25, // 95: PaymentsService.TipUser:output_type -> TipUserResponse
	56, // 96: PaymentsService.TipProgress:output_type -> TipProgressEvent
	6,  // 97: PaymentsService.AckTipProgress:output_type -> AckResponse
	58, // 98: ResourcesService.RequestsStream:output_type -> ResourceRequestsStreamResponse
	60, // 99: ResourcesService.FulfillRequest:output_type -> FulfillResourceRequestResponse
	62, // [62:100] is the sub-list for method output_type
	24, // [24:62] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_clientrpc_proto_init() }
func file_clientrpc_proto_init() {
	if File_clientrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepaliveStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepaliveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCReceivedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToPostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeToPostsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeToPostsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostsStatusStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPostStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediateKXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediateKXResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KXStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KXCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteNewInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteNewInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteToGCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteToGCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptGCInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptGCInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickFromGCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickFromGCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGCsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGCsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedGCInvitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedGCInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAndNick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMembersAddedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMembersAddedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMembersRemovedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCMembersRemovedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinedGCsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinedGCEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipProgressEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequestsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequestsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulfillResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulfillResourceRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMPrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMGroupMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMetadataStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFunds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OOBPublicIdentityInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMGroupInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMFetchResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RMFetchResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientrpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGCsResponse_GCInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientrpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   76,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_clientrpc_proto_goTypes,
		DependencyIndexes: file_clientrpc_proto_depIdxs,
		EnumInfos:         file_clientrpc_proto_enumTypes,
		MessageInfos:      file_clientrpc_proto_msgTypes,
	}.Build()
	File_clientrpc_proto = out.File
	file_clientrpc_proto_rawDesc = nil
	file_clientrpc_proto_goTypes = nil
	file_clientrpc_proto_depIdxs = nil
}
